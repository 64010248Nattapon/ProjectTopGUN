/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.11.2023 21:42:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410816;
#else
constexpr int kTensorArenaSize = 1409792;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032602844294160604, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[18] = { 12917, -26249, -18406, -21379, -23906, -18033, -21030, -28499, -22308, -19611, -23201, -25741, -23691, -32373, -15218, -29531, -15292, -26233, };
const TfArray<1, int> tensor_dimension2 = { 1, { 18 } };
const TfArray<18, float> quant2_scale = { 18, { 0.00054484145948663354, 0.00036948383785784245, 0.00051590922521427274, 0.00044924562098458409, 0.0004026275419164449, 0.00052995834266766906, 0.00045686677913181484, 0.00033796616480685771, 0.0004185830766800791, 0.00048437702935189009, 0.00041698350105434656, 0.00037235391209833324, 0.00040716925286687911, 0.00030103704193606973, 0.00063268735539168119, 0.00032363188802264631, 0.00062472064746543765, 0.00036730174906551838, } };
const TfArray<18, int> quant2_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[18*1*1*32] = { 
  /* [0][0][][] */ 14,-21,-25,59,-45,-14,-15,1,-52,-22,-30,-48,-4,2,5,-48,12,-6,41,-14,7,-46,-38,-5,18,26,19,8,-35,-28,127,-25, 
  /* [1][0][][] */ 44,-5,-31,-27,21,6,-49,36,61,-9,-57,14,19,-125,-34,50,13,-62,-121,-36,56,59,65,15,9,-54,-39,55,-127,1,37,32, 
  /* [2][0][][] */ -6,-7,-35,-21,38,41,-36,52,-49,1,-8,-44,1,1,38,11,-3,27,-127,42,-48,25,32,16,-26,-37,-36,-3,-52,-14,-75,50, 
  /* [3][0][][] */ 34,20,-47,39,33,-26,41,-38,-17,0,47,36,25,28,26,27,1,-13,-52,34,-43,12,-56,48,-127,-5,-15,12,-116,-17,-50,38, 
  /* [4][0][][] */ -18,-2,57,-127,-15,-14,53,69,44,22,42,-64,12,-59,-31,31,11,66,-29,56,-49,-37,17,-9,-75,19,-87,-75,53,34,-45,-44, 
  /* [5][0][][] */ 28,42,-43,-73,-18,-15,-23,3,45,28,-35,-61,-46,14,6,44,-32,35,-41,13,34,-7,49,26,-127,4,-53,-28,-105,34,-29,35, 
  /* [6][0][][] */ 49,-7,40,-13,-57,2,-2,31,-3,45,-51,-19,-9,0,-39,44,-37,2,36,52,35,25,52,-51,-127,-50,38,10,8,52,-105,25, 
  /* [7][0][][] */ -45,88,26,-93,-34,-12,-74,-3,45,-33,85,38,41,-36,25,47,2,26,-127,-63,51,-9,-44,-48,-104,15,-72,66,-22,-69,-26,43, 
  /* [8][0][][] */ -32,47,44,6,-29,17,-41,-45,56,9,-70,-31,-20,-75,64,3,-9,16,-56,14,30,27,8,-16,-20,56,-23,-4,-112,17,-127,-11, 
  /* [9][0][][] */ -37,22,23,-12,14,46,-46,-47,57,-14,32,48,-46,-45,-10,-21,-11,34,-4,15,30,31,14,-37,-42,9,39,-3,-10,-33,-127,-13, 
  /* [10][0][][] */ 21,-16,-19,4,1,13,5,49,12,-8,8,-17,21,-99,11,-11,12,-1,-111,20,31,-33,-5,54,-113,71,37,55,21,48,-127,-21, 
  /* [11][0][][] */ 51,28,65,36,-101,-46,62,12,-6,28,-33,-7,-75,9,30,39,36,-38,-106,-35,-13,62,13,0,-97,-34,47,66,-127,-18,-80,41, 
  /* [12][0][][] */ -35,27,-57,35,63,-21,-5,-15,-51,11,-28,22,-127,-64,60,0,14,47,4,58,6,54,27,39,-28,73,-17,-74,-31,-10,-96,-31, 
  /* [13][0][][] */ 3,-5,76,68,-108,-20,-51,-43,88,32,31,-15,0,-45,49,90,8,64,-51,4,-25,67,-37,17,-63,-33,-20,-30,-119,-13,-127,10, 
  /* [14][0][][] */ 35,46,-21,-36,-22,8,32,12,-29,24,44,11,-45,-13,-16,-8,43,17,-96,32,-2,8,-18,-15,-122,44,-24,-35,-41,25,-127,10, 
  /* [15][0][][] */ 16,-25,64,-105,-13,51,47,59,-54,-5,-60,61,-28,-70,77,22,-32,-36,-127,-23,38,26,62,-83,-97,67,-64,-45,75,85,-65,-7, 
  /* [16][0][][] */ 47,-19,-11,28,-8,33,5,-5,6,-32,-38,-9,9,-12,8,-1,-26,-2,-11,-24,-22,45,-3,36,-54,-6,-17,7,28,-11,-127,23, 
  /* [17][0][][] */ -21,7,-15,-64,-69,-45,-1,29,1,42,51,-23,-27,59,75,-53,-25,67,-71,-32,75,-40,46,64,-85,-41,34,-110,-58,-47,-127,-33, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 18,1,1,32 } };
const TfArray<18, float> quant3_scale = { 18, { 0.0074556893669068813, 0.0050560701638460159, 0.0070597762241959572, 0.0061475420370697975, 0.0055096135474741459, 0.0072520268149673939, 0.0062518310733139515, 0.004624777939170599, 0.0057279514148831367, 0.0066282851621508598, 0.0057060625404119492, 0.005095344502478838, 0.0055717630311846733, 0.0041194343939423561, 0.0086577851325273514, 0.0044286255724728107, 0.0085487673059105873, 0.0050262100994586945, } };
const TfArray<18, int> quant3_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -1, -299, -228, 1898, 43, 430, 195, 463, -1069, -349, 102, -454, 576, 1457, 186, -947, 37, 140, 3012, -224, 285, -492, -88, -273, 2117, 771, 315, 187, 402, -172, 2930, -579, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.7906781623605639e-05, 5.9184571000514552e-05, 6.8390880187507719e-05, 6.3758801843505353e-05, 7.8902077802922577e-05, 5.9235459048068151e-05, 4.8795853217598051e-05, 5.9703652368625626e-05, 5.5250329751288518e-05, 4.6019766159588471e-05, 5.3250918426783755e-05, 5.3197854867903516e-05, 5.6071814469760284e-05, 5.7476681831758469e-05, 6.0770755226258188e-05, 5.1401708333287388e-05, 5.0345279305474833e-05, 6.1173996073193848e-05, 9.5055787824094296e-05, 4.7820649342611432e-05, 5.2103085181443021e-05, 5.6418299209326506e-05, 7.8563491115346551e-05, 6.0322487115627155e-05, 0.00011246875510551035, 5.21594520250801e-05, 6.0437982028815895e-05, 5.8386092860018834e-05, 7.0728063292335719e-05, 5.0481470680097118e-05, 0.00011877130600623786, 4.8232737754005939e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -9,-15,86,4,70,2,-60,-85,6,-85,-82,-12,45,18,-44,47,-60,-35,-49,-46,-89,-77,18,75,-73,-16,57,-12,68,10,6,-58,41,-23,-78,37,-65,-74,-57,17,38,-44,-57,80,30,-72,91,1,-16,-127,-16,61,-40,-36,-81,78,6,40,113,-59,-61,65,-48,32,9,34,26,66,45,58,53,-106,82,-85,41,40,-62,-12,-33,32,41,4,72,15,-19,-59,-54,51,34,107,5,-60,-12,40,-13,1, 
  /* [1][0][][] */ -89,23,-49,6,-10,70,35,0,70,-63,-94,83,42,-30,-34,26,79,-23,4,105,-57,-16,40,36,57,19,-36,93,17,-12,77,-45,58,60,-9,27,69,43,-31,-45,-38,25,-8,-84,-32,24,-20,-34,3,-127,101,59,20,50,-73,-47,22,73,74,48,-39,77,-36,-46,-28,20,47,6,57,26,6,6,-87,85,-52,18,71,2,-54,63,-49,59,-33,-62,7,120,-55,-43,74,92,53,16,32,28,26,2, 
  /* [2][0][][] */ 8,20,-34,67,-18,-59,54,71,-58,56,-29,94,66,-22,58,-64,-38,-12,4,42,-115,12,72,23,-42,44,78,11,-48,57,31,47,-42,-31,-52,-69,-43,70,84,-2,-98,-65,16,11,-79,72,-25,-46,77,-18,50,-44,-25,27,15,20,-55,73,-47,-1,-5,50,-49,43,51,13,36,54,-69,56,0,-58,34,-61,31,5,-36,8,15,21,32,-74,-24,-47,4,-127,-9,-8,43,59,-14,16,-39,-56,-65,-43, 
  /* [3][0][][] */ 83,23,32,-15,-35,30,-64,9,46,23,79,-3,79,103,56,29,65,81,-8,23,127,-37,-4,-79,-18,-61,-13,85,69,-33,91,-6,-34,-5,17,-11,-62,7,50,37,-17,-52,-73,7,36,79,-12,-13,51,-10,41,-29,103,54,116,-54,-78,-63,-53,-42,-65,32,-25,78,65,-8,-28,1,-4,-68,28,93,36,-75,64,17,26,55,104,-34,-50,-75,85,94,33,59,-1,-59,-15,60,29,-77,116,-81,-74,63, 
  /* [4][0][][] */ 54,62,0,24,-14,-6,12,28,94,46,18,30,24,3,12,-34,20,4,11,11,117,-26,53,13,32,-7,40,-18,6,25,-40,10,46,69,7,-29,-8,-6,-48,43,-45,-56,-39,-52,14,51,26,55,0,-41,12,-1,-72,12,-56,18,48,-48,-1,30,43,-65,-34,-62,-19,34,12,-6,38,-56,-28,-88,-31,2,63,-4,61,4,14,-13,10,-54,-97,-70,19,58,54,10,-66,-31,36,21,27,89,-127,-21, 
  /* [5][0][][] */ 112,-47,76,71,51,-69,33,65,59,-49,20,-27,41,76,55,49,67,70,-28,71,-5,41,-16,4,-86,-20,11,-56,49,41,28,-46,-21,31,-45,36,-85,-15,54,47,-49,-46,37,93,-47,21,47,-24,-47,114,40,36,43,12,15,-6,100,55,-61,-2,54,-30,-21,-46,-1,93,4,42,75,6,63,-33,-12,77,3,-69,17,-63,-12,68,95,37,36,59,-34,-16,-54,46,60,-88,86,90,-2,37,127,-69, 
  /* [6][0][][] */ 44,-37,127,89,-69,-9,-10,60,-40,-99,-45,-62,98,84,122,-89,26,-28,-21,107,-113,-61,119,66,-54,-88,-3,-14,-12,-102,58,-76,-76,-72,-29,-90,21,42,-93,66,100,111,31,4,-122,107,-47,-21,-108,-55,-25,-57,68,-84,57,7,-8,5,-29,90,-115,48,93,-42,-38,95,95,-31,100,16,-93,-14,87,-67,-60,-34,-92,-78,-33,3,47,-50,45,3,-42,-81,-41,-82,92,120,118,30,-57,-59,26,-29, 
  /* [7][0][][] */ 107,30,-8,-7,-48,85,-16,7,37,7,-96,25,59,-52,40,51,37,-10,-5,99,-4,42,-10,77,-68,85,7,41,-63,55,-19,27,38,40,64,87,-76,83,-22,-30,69,-56,74,60,52,-18,107,-96,6,-14,-82,-71,-14,40,-19,49,88,-62,-7,-48,-15,18,43,-84,-56,-41,53,28,-75,43,56,78,82,24,51,42,-76,27,-82,41,80,-9,1,-127,73,-1,-87,73,68,5,82,68,-35,-13,24,-43, 
  /* [8][0][][] */ 1,43,-47,-76,50,19,-46,-7,-15,43,51,101,7,-42,-89,-46,-32,103,-63,15,-21,-20,100,91,-102,77,54,69,-49,19,-92,110,65,-31,36,-11,107,-6,-21,100,56,63,-93,-78,-1,-52,-22,101,67,-114,-47,29,-62,-22,-46,-76,31,112,-68,114,127,32,27,82,-16,-48,-20,83,-57,42,19,-20,67,45,24,-26,-18,103,62,56,24,65,-111,-69,41,-8,91,-24,6,-53,-86,76,-87,-102,-65,39, 
  /* [9][0][][] */ -32,-34,120,63,70,-124,-61,-88,40,66,-70,80,-12,-71,-127,-36,-19,-16,-107,-40,-39,99,-44,-84,105,-2,-4,37,-22,-54,-92,25,74,-14,49,-38,-38,36,4,-83,25,-66,65,-73,65,-14,-71,53,81,-79,-91,-78,89,-81,-97,120,29,-53,46,-40,-98,108,81,-56,-76,-10,88,22,-79,123,116,-66,28,86,-100,-123,-79,-83,-3,114,43,-14,126,-31,-41,-94,75,38,120,84,-22,117,82,-17,19,-28, 
  /* [10][0][][] */ -69,52,86,-32,9,104,112,57,-14,53,16,-9,93,56,-27,-13,-17,88,-87,-18,-58,39,62,-37,26,71,-118,-96,-25,45,-59,-51,93,94,127,63,-7,42,-22,44,-14,126,-86,-47,-108,-57,21,-76,36,6,47,-22,82,28,-77,-13,-85,7,57,-56,-29,75,117,65,106,-66,-73,-35,20,-2,-97,-24,93,102,-80,84,-53,86,16,8,76,-13,70,110,-107,68,97,-18,57,33,-15,-37,-40,-73,-13,-51, 
  /* [11][0][][] */ 63,20,-6,85,103,77,47,34,91,77,-63,100,4,-96,-22,-58,-48,-71,52,24,-38,22,25,-92,-85,-75,-10,77,70,-11,39,7,-72,-42,38,40,-42,38,-13,-33,3,91,-66,8,-45,-87,-70,-66,93,23,105,41,-72,-69,-24,19,-50,-34,-10,-60,-67,82,97,15,36,102,-49,17,101,43,-127,-61,38,75,-85,9,-62,15,-19,55,-84,-26,-66,-64,33,-81,18,-36,-83,-3,-15,-76,-94,-25,-65,-51, 
  /* [12][0][][] */ 43,56,-34,10,71,31,-19,-8,-90,57,-29,5,-36,29,34,-68,-80,-25,-45,-55,21,-8,36,68,-32,-22,68,-74,82,13,-10,104,-45,-26,-16,16,1,-59,-34,31,127,55,-94,-37,31,-64,-23,88,-9,-77,-48,81,29,25,-65,85,17,-43,56,41,26,104,39,54,89,39,-54,91,66,81,41,79,70,72,-21,35,-32,41,-77,-90,-45,103,20,83,-27,102,93,71,-70,-108,89,32,66,-1,68,72, 
  /* [13][0][][] */ 92,6,76,73,62,102,72,66,47,-105,58,-44,66,81,67,-19,-102,-54,-35,17,108,-34,125,-51,-70,26,11,24,-67,-21,74,15,24,92,-6,11,-77,-23,94,20,-22,98,-36,13,-5,77,-10,-13,21,113,-44,-121,-56,105,93,-59,-32,16,24,-69,-50,78,-7,25,-37,-18,-64,73,-13,-17,90,32,-69,50,-51,11,-83,5,127,-59,38,-56,89,41,-57,41,109,122,23,13,-31,33,103,-10,41,18, 
  /* [14][0][][] */ -45,-75,70,64,71,0,10,-65,-43,-5,41,85,-8,-56,-80,-70,-21,-28,-14,35,-40,36,3,60,-70,-33,-21,35,-58,-91,-43,37,93,-4,-6,19,84,97,18,-55,5,-59,32,65,45,-84,57,-42,127,69,61,55,84,7,-14,24,-16,30,29,73,-7,-47,1,77,-52,-9,73,-66,-65,-53,-67,79,14,77,43,-75,48,-54,13,34,43,-14,-85,-99,-75,-27,-79,82,79,-25,69,-28,76,78,-24,54, 
  /* [15][0][][] */ 16,-25,-17,59,86,-68,45,-85,50,24,-94,6,92,-1,-93,-98,42,9,-87,26,6,14,85,101,99,70,46,88,17,54,76,-101,15,9,-47,-17,-41,69,99,-43,21,89,-39,-10,19,-86,-14,-79,23,-116,13,8,-87,-107,-62,6,27,42,-4,82,-48,-41,4,91,-17,85,-82,-17,-58,11,54,-61,20,-44,48,-127,7,84,90,69,-70,46,-72,-27,-101,-51,-60,45,83,92,-100,-32,14,85,-74,89, 
  /* [16][0][][] */ -85,-8,91,-61,54,63,-61,10,51,57,-98,59,-19,-37,-60,-71,75,46,68,52,127,78,-63,43,-14,53,-67,49,-75,1,45,-2,-81,56,35,66,-21,48,-73,-81,-49,-48,56,60,14,91,92,-14,-125,-123,36,91,-27,99,53,21,33,56,69,-2,89,92,-44,56,59,4,-45,66,26,63,-27,-11,19,78,42,70,-18,82,-113,-11,12,-93,58,23,-6,77,40,-19,90,42,-17,89,47,-35,-50,16, 
  /* [17][0][][] */ 25,-98,27,73,-14,-97,-30,-40,57,-24,75,63,95,50,-83,29,47,80,81,105,-53,15,37,-13,33,78,-38,29,93,-38,-21,49,3,-3,51,16,-6,95,-53,2,-70,-37,1,-29,1,12,82,-64,122,91,-3,19,0,61,52,-34,-77,83,-36,-81,32,-82,63,88,-46,-76,46,-78,-93,14,98,48,29,-59,-47,18,96,-6,35,-25,22,-25,-36,-127,-83,62,80,-29,29,60,-67,-72,-2,66,17,19, 
  /* [18][0][][] */ -40,47,43,-25,-19,-67,-38,11,46,29,-27,-53,-21,67,67,-10,12,5,95,-6,127,1,27,-54,28,-22,2,53,27,38,0,19,35,-10,-10,-58,-28,54,53,14,-12,8,-16,-3,-60,46,-19,-6,-2,42,0,-4,-28,34,99,37,-9,13,5,-80,30,56,27,29,-48,-48,8,51,45,-40,16,98,-45,-17,-38,42,31,8,52,-36,-22,4,4,35,40,33,85,16,-18,-27,8,49,96,-27,26,67, 
  /* [19][0][][] */ 30,7,76,43,63,-101,67,68,121,-12,-23,-7,-81,48,-70,36,55,-108,118,63,11,80,-56,21,93,-40,20,-59,-69,-123,-37,34,93,-67,43,14,22,-51,-66,-118,36,-123,-68,-5,-108,19,92,-92,-11,23,-19,18,-31,26,-23,-8,37,62,12,-55,48,-41,70,56,-55,-11,-36,-14,-29,56,92,-33,-52,-120,-69,-103,-21,-76,-5,102,56,-127,9,42,-83,0,14,-41,105,56,2,59,-35,107,82,-41, 
  /* [20][0][][] */ -22,62,57,102,-81,91,46,82,-7,-23,-31,39,11,73,21,-47,-13,0,-102,-9,-30,-33,-26,-48,53,-78,-80,52,12,4,-68,127,83,30,-5,42,52,-6,29,-59,-69,-28,-54,-61,1,-68,-62,106,82,-115,-103,62,48,85,34,24,84,92,92,107,118,-44,-47,-26,-24,-58,-26,33,-61,-27,-52,59,-30,-43,47,40,104,76,115,102,87,22,54,-10,81,112,29,123,-5,62,25,73,16,8,-36,26, 
  /* [21][0][][] */ 84,84,71,-82,90,-57,55,24,33,-25,-58,44,21,36,-55,-53,-90,-21,4,-8,89,-26,58,-44,74,-60,3,73,23,27,13,-23,15,27,-68,-74,102,57,-90,0,-26,-15,31,13,-120,-76,-34,90,-7,-65,16,82,29,20,-103,27,-44,49,-18,117,67,-52,-32,-15,81,41,-29,-49,-73,-9,52,37,39,-10,75,-15,-63,-6,62,98,21,53,45,-108,39,-127,20,-67,-58,96,80,-71,-42,-38,38,-26, 
  /* [22][0][][] */ 30,-23,-32,-41,39,-32,54,55,-36,43,-29,-43,77,-57,-56,-38,26,37,-65,-23,50,-33,35,27,60,-5,-60,60,-45,-37,-49,-59,33,34,20,9,4,6,-7,-50,-8,-29,13,69,43,-83,66,-8,-45,0,-9,-4,-41,-70,-54,35,-19,-8,-15,4,75,-45,-61,-84,-40,11,-51,-17,59,80,-1,5,-29,21,49,-75,34,-25,65,63,68,-46,-32,-127,59,42,62,18,-29,23,-29,47,16,21,-16,61, 
  /* [23][0][][] */ 50,-57,-1,43,70,-72,10,-82,48,-58,50,53,17,-59,-22,-41,72,-21,-92,81,60,-49,96,-22,-8,0,50,31,73,19,55,-23,-11,46,28,28,85,-3,-106,3,-68,13,-1,-100,-49,-79,99,43,80,-38,-77,-32,46,-39,-76,79,-36,-15,77,40,-93,-85,-25,3,32,31,-90,-79,54,-13,91,-50,-3,-19,-36,-112,48,-7,64,86,-42,-65,15,-127,75,21,100,-50,-70,4,79,-19,75,-41,-56,57, 
  /* [24][0][][] */ -27,8,-40,-16,-26,-30,-6,-39,43,48,56,3,44,33,16,-35,-19,19,79,-21,92,-33,-27,-23,24,3,34,21,51,38,22,2,-6,11,26,38,-32,-11,28,-7,-11,-25,52,24,40,-1,5,36,-44,54,25,43,37,40,127,-39,12,38,0,13,66,19,39,52,-31,46,5,-7,-19,17,-15,19,-20,26,52,119,40,-40,-31,-29,-22,11,-2,12,6,31,1,-26,30,-25,22,-28,27,35,3,56, 
  /* [25][0][][] */ -71,-70,-59,7,92,-77,-73,53,64,-110,-40,40,74,19,-85,-18,-23,73,3,-74,71,91,-18,-28,26,-46,-74,53,90,-93,14,127,99,-84,39,83,108,-50,-18,6,-109,85,-87,6,76,56,51,55,-60,46,-69,24,39,17,-36,23,24,58,-116,58,119,76,6,50,3,66,11,22,-75,1,-9,-119,53,-122,65,27,77,79,-6,46,57,8,-72,41,-51,10,-106,-64,-26,-54,107,25,-104,-26,-77,-64, 
  /* [26][0][][] */ 12,-86,-23,-6,-73,-30,4,22,-59,-127,118,88,-42,-23,20,2,95,48,-2,-53,27,62,76,5,13,45,23,38,17,22,-74,-7,-20,-61,-69,-66,-41,96,16,71,-100,69,41,15,-86,63,-24,97,-4,8,-5,81,19,1,-4,-78,100,54,61,23,0,-100,29,-4,89,-27,-20,47,-56,59,79,77,72,-60,-49,7,16,-99,-35,9,-16,32,84,-82,71,-26,-1,14,-54,80,10,16,-27,107,1,58, 
  /* [27][0][][] */ -6,32,-31,-63,-60,-24,-30,-6,6,54,44,-45,-2,53,46,-1,65,2,13,-63,-108,21,-2,-4,-79,30,-57,25,75,43,-21,26,50,65,-88,-36,-37,-38,-78,81,-47,36,19,30,44,12,76,116,74,7,81,-22,-60,-56,-63,-15,112,6,-58,-29,-37,-29,-10,44,64,-17,-79,97,68,3,-82,-23,71,-51,20,-87,47,-51,71,87,78,0,76,-127,-22,-92,-16,31,-37,3,-13,-23,8,28,33,31, 
  /* [28][0][][] */ 121,-25,90,46,-97,-63,-118,-1,10,-48,22,49,-31,-17,72,82,61,52,-29,59,1,54,-64,-26,-127,51,-29,-40,-40,-25,1,-20,-75,41,85,43,8,-39,26,39,1,-5,-26,44,-82,11,35,30,1,-44,-93,-60,-57,2,24,58,39,5,24,30,-37,-16,-89,-26,26,59,32,62,-17,51,-38,-20,74,13,24,-74,-88,-87,-11,62,-23,-71,76,-54,56,-54,0,-51,-63,-23,30,-21,-65,55,-116,-81, 
  /* [29][0][][] */ 53,10,66,-29,-83,16,-127,12,77,-21,-111,-65,101,-73,-34,-43,-83,72,16,-52,-98,-12,42,16,-26,-6,-38,-20,-92,-19,69,9,59,4,-67,-47,-12,85,-1,84,34,75,-33,80,13,73,-32,-37,29,-69,23,-96,56,-90,76,64,-70,43,-52,81,-104,122,-98,-57,-68,-57,51,79,78,-52,37,-84,110,38,57,15,92,-50,-41,44,6,-66,-17,-57,64,103,46,87,-32,86,75,82,-93,19,-24,51, 
  /* [30][0][][] */ 24,21,-30,10,-37,14,23,-21,38,-3,45,-37,-46,69,60,19,10,28,127,-41,73,-25,-28,-11,-24,37,-27,38,12,-28,16,19,-38,-9,-26,-4,-24,-4,11,10,54,24,-6,50,71,31,11,15,-40,52,15,-42,51,64,99,37,7,-17,-24,-14,-20,25,26,31,-40,-25,-31,60,-14,24,30,21,-37,16,29,62,-5,-38,-26,-28,10,91,-15,78,-28,40,11,52,40,-33,46,17,7,-10,52,37, 
  /* [31][0][][] */ 93,-58,55,97,80,83,-43,-92,-65,25,-100,-87,96,-119,-61,100,-109,-95,33,56,8,10,-16,115,61,-69,34,44,-55,-49,85,76,24,48,-72,5,96,-30,-59,-107,82,-33,-16,28,5,-74,6,17,72,70,127,-46,-82,-69,-112,25,-111,52,54,100,-81,-2,98,-46,96,126,-65,-92,74,-101,-121,32,-82,15,2,-38,-61,-28,22,71,-61,-16,103,58,49,78,-103,-6,54,7,-84,-42,16,94,38,-23, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0028860380407422781, 0.0025153441820293665, 0.0029066123533993959, 0.0027097489219158888, 0.0033533382229506969, 0.0025175069458782673, 0.0020738237071782351, 0.0025374051183462143, 0.0023481389507651329, 0.0019558400381356478, 0.0022631639149039984, 0.002260908717289567, 0.0023830521386116743, 0.002442758996039629, 0.0025827570352703333, 0.0021845726296305656, 0.0021396742668002844, 0.00259989476762712, 0.0040398710407316685, 0.0020323775243014097, 0.002214381005614996, 0.0023977777455002069, 0.0033389483578503132, 0.0025637056678533554, 0.0047799218446016312, 0.0022167766001075506, 0.0025686142034828663, 0.0024814088828861713, 0.0030059425625950098, 0.0021454624366015196, 0.0050477804616093636, 0.0020498912781476974, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 595, -65, 1621, 3223, 1800, -975, 1379, -694, -1169, -286, 2579, -1345, 1594, 3387, 1279, 1383, -385, -136, -278, 2547, 1794, -399, 883, -444, -554, 1240, 670, 947, 2470, 1161, 2062, 880, 644, 1915, 2329, 1853, -584, 1394, 1637, -2056, 0, 630, 22, 1155, -248, 676, -700, 369, -2836, 1568, 558, -1631, 3268, -38, 1586, 599, 574, 1100, -348, -1256, 168, 945, 318, 2033, 3113, 1550, 1718, 3086, 2010, -643, 1430, 3424, 1288, -585, 2466, 4645, 418, -2192, 170, 337, 3898, 714, -149, -452, 492, 936, 708, -868, 1727, -289, 2104, 564, 123, -1366, 93, 766, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033464201260358095, 0.00046399835264310241, 0.000345158128766343, 0.00023305779905058444, 0.00030719747883267701, 0.00039418626693077385, 0.00038392841815948486, 0.00035541263059712946, 0.00032391099375672638, 0.00057416880736127496, 0.00030850814073346555, 0.00036936829565092921, 0.00032516053761355579, 0.0002294548467034474, 0.00037407234776765108, 0.00029436300974339247, 0.00043129562982358038, 0.00041577601223252714, 0.00044757037539966404, 0.00021812014165334404, 0.00040876452112570405, 0.00038707113708369434, 0.00028795059188269079, 0.00043135980376973748, 0.0004772667889483273, 0.00044344228808768094, 0.00032181732240132987, 0.00035856058821082115, 0.0003126059309579432, 0.00032801833003759384, 0.00029349373653531075, 0.00038459897041320801, 0.00042685310472734272, 0.00030388595769181848, 0.00025585602270439267, 0.00028324479353614151, 0.00032386460225097835, 0.00031875446438789368, 0.00030436096130870283, 0.00023557063832413405, 0.00038969866000115871, 0.00033458703546784818, 0.00029442118830047548, 0.00029797284514643252, 0.00042551447404548526, 0.00028850079979747534, 0.00033044908195734024, 0.00030353610054589808, 0.00023931448231451213, 0.00036219265894033015, 0.00043352830107323825, 0.00028240104438737035, 0.00024943632888607681, 0.00026684007025323808, 0.00041613666689954698, 0.00044149722089059651, 0.00032683907193131745, 0.0003090075624641031, 0.00048141769366338849, 0.00029238566639833152, 0.00038357044104486704, 0.00035976144135929644, 0.00051646912470459938, 0.00034825832699425519, 0.00019441432959865779, 0.00027589290402829647, 0.0002336241741431877, 0.00025317617109976709, 0.00031471997499465942, 0.00033208250533789396, 0.00034931529080495238, 0.00023459714429918677, 0.00029789761174470186, 0.00036773737519979477, 0.00029478210490196943, 0.00021610084513667971, 0.00029883164097554982, 0.00028518974431790411, 0.00043898783042095602, 0.00036329534486867487, 0.00022087742399889976, 0.00037467910442501307, 0.00039461767300963402, 0.00047578796511515975, 0.00035861606011167169, 0.00031478202436119318, 0.0004858820466324687, 0.00033872318454086781, 0.00036693908623419702, 0.00044920560321770608, 0.0003084854397457093, 0.00034812962985597551, 0.00035485727130435407, 0.00030374396010302007, 0.0004335643898230046, 0.00037820081342943013, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -22,88,-105,46,50,-29,110,75,-73,24,44,-101,108,127,-95,48, 
  /* [1][0][][] */ -20,5,-54,-13,-20,51,24,-127,31,-46,-43,-66,-18,-35,-59,1, 
  /* [2][0][][] */ -34,-37,50,78,11,35,-114,127,-22,20,70,-92,-5,-77,-45,83, 
  /* [3][0][][] */ 97,-113,99,-19,-17,-49,-30,127,-27,80,73,46,16,70,10,11, 
  /* [4][0][][] */ -51,-28,8,60,-87,39,-5,-127,21,5,16,-22,54,39,82,103, 
  /* [5][0][][] */ 127,24,-8,-18,-85,8,36,78,13,-19,46,87,120,31,-71,-11, 
  /* [6][0][][] */ 19,-33,-45,-42,-74,-13,12,-50,-47,-38,-21,18,63,41,127,-9, 
  /* [7][0][][] */ -45,28,-33,-78,17,-48,-62,17,-98,38,-54,-48,-127,-33,13,83, 
  /* [8][0][][] */ 53,42,81,17,50,32,80,5,75,-16,36,15,-127,-30,-78,3, 
  /* [9][0][][] */ -30,67,26,-51,-18,-22,38,-16,-27,39,-40,16,35,127,13,18, 
  /* [10][0][][] */ 71,43,-31,70,-21,-19,36,-80,-93,-7,-59,-82,-127,-54,41,100, 
  /* [11][0][][] */ 58,-1,63,-9,-18,-35,18,90,-113,29,-37,21,-1,-19,57,127, 
  /* [12][0][][] */ -56,-44,13,2,14,-14,127,45,-61,49,12,-14,7,64,-43,122, 
  /* [13][0][][] */ 42,61,13,35,122,43,110,70,-76,64,-127,-81,26,79,-112,-24, 
  /* [14][0][][] */ -102,127,0,-14,12,16,58,-2,-27,5,89,0,-102,19,-58,30, 
  /* [15][0][][] */ -6,-8,-127,-55,88,-58,-93,-48,-15,-27,-20,-80,-5,-79,-57,39, 
  /* [16][0][][] */ 109,-13,15,-18,43,-47,52,-34,-32,22,127,50,23,11,-38,13, 
  /* [17][0][][] */ -4,4,-24,-97,-5,-72,127,-100,-38,-5,-36,53,22,77,17,68, 
  /* [18][0][][] */ 14,117,-25,-38,57,-60,-24,-69,-20,127,-29,11,-22,25,-19,-25, 
  /* [19][0][][] */ -82,-126,127,-86,23,-116,42,-42,52,75,97,82,43,2,72,-19, 
  /* [20][0][][] */ -21,86,60,16,17,24,38,-50,66,12,83,-8,-127,-45,-72,-7, 
  /* [21][0][][] */ -71,41,40,10,50,35,54,34,-127,68,-39,18,-5,35,-30,-22, 
  /* [22][0][][] */ 11,-121,46,7,20,-120,127,-19,1,-39,-48,-73,78,-110,-79,-35, 
  /* [23][0][][] */ -59,-98,27,53,14,-7,20,-31,15,-30,76,-13,24,68,63,127, 
  /* [24][0][][] */ -9,-5,31,82,31,9,-49,-127,74,27,-31,17,-6,4,-16,-29, 
  /* [25][0][][] */ -12,32,27,-82,-21,-18,37,-33,-56,52,-40,16,27,127,28,3, 
  /* [26][0][][] */ -63,89,-2,15,25,-84,-3,-38,15,17,0,73,15,-4,-95,127, 
  /* [27][0][][] */ -20,-127,-41,10,-61,81,8,-66,18,-35,37,-23,41,-56,-102,-28, 
  /* [28][0][][] */ -27,0,23,84,19,16,-22,-127,-99,45,76,-10,73,1,-56,-17, 
  /* [29][0][][] */ -127,100,-31,-15,-26,29,-111,-81,-28,-27,-10,-5,-8,-68,-125,64, 
  /* [30][0][][] */ 37,66,-40,102,-90,-71,-88,-15,-19,3,7,-102,127,15,-15,89, 
  /* [31][0][][] */ 127,7,-50,-24,-66,16,107,13,-94,11,75,96,44,8,-14,33, 
  /* [32][0][][] */ -36,-38,127,5,-34,57,71,20,-13,1,-5,28,16,54,68,54, 
  /* [33][0][][] */ 6,17,-71,-35,-45,25,127,24,-7,-7,13,-90,98,127,-37,55, 
  /* [34][0][][] */ -77,-6,123,8,33,-66,103,-27,-127,48,47,-65,56,89,-26,-64, 
  /* [35][0][][] */ -12,7,-45,21,-85,104,-38,3,-13,127,15,64,-61,79,37,25, 
  /* [36][0][][] */ 2,-81,127,-44,-55,25,-38,-30,24,33,-42,102,23,-96,-36,44, 
  /* [37][0][][] */ 57,-24,77,-18,84,-71,-20,28,-66,127,-68,16,-57,-45,71,-1, 
  /* [38][0][][] */ 38,55,23,-119,-3,-75,-127,69,-90,34,-104,-61,-100,-97,-107,52, 
  /* [39][0][][] */ -88,16,-58,-21,-68,-82,89,5,-127,-25,29,77,32,-5,-23,60, 
  /* [40][0][][] */ 127,31,21,-72,-116,47,32,-67,-21,1,-62,-107,41,36,13,60, 
  /* [41][0][][] */ 89,-79,-43,-45,-15,-3,-53,-33,47,-15,-5,-50,127,-69,48,-31, 
  /* [42][0][][] */ -20,-82,-47,127,-1,-88,-111,28,11,25,10,45,-96,81,-56,2, 
  /* [43][0][][] */ -107,-52,-55,-123,-59,14,-8,101,51,-127,-28,17,-20,-42,-25,107, 
  /* [44][0][][] */ -44,24,3,-29,-21,-30,32,88,100,-65,91,127,98,24,10,22, 
  /* [45][0][][] */ 31,65,-68,78,127,-87,-34,-78,93,-62,76,-37,-39,4,-58,59, 
  /* [46][0][][] */ -23,-42,14,-1,86,-13,31,15,1,127,-22,-110,29,60,-34,58, 
  /* [47][0][][] */ 101,-46,-49,-18,80,-14,-26,-64,-25,127,-44,58,-13,-124,-101,13, 
  /* [48][0][][] */ -15,4,10,-101,-33,-83,127,-108,-11,19,-53,36,85,62,-5,43, 
  /* [49][0][][] */ -59,63,-57,69,4,-54,98,83,-47,63,46,-77,-34,76,127,-36, 
  /* [50][0][][] */ 2,35,-13,13,-127,1,-69,-63,53,69,21,24,-26,-35,8,32, 
  /* [51][0][][] */ 127,-63,-55,7,-62,99,-79,-46,37,-4,-34,94,-39,-98,-13,60, 
  /* [52][0][][] */ -17,-48,46,47,-43,-91,-127,-8,-78,-44,-21,-63,36,-42,58,69, 
  /* [53][0][][] */ 22,111,52,-118,27,123,105,-30,-14,-36,-1,-20,54,-127,10,65, 
  /* [54][0][][] */ 11,107,-2,11,0,-72,-99,49,24,-8,-47,127,85,79,11,86, 
  /* [55][0][][] */ -57,-37,47,40,51,-19,107,116,-69,7,29,6,127,50,-27,10, 
  /* [56][0][][] */ 127,6,0,29,-51,113,-51,-72,-32,74,-81,12,-72,91,-8,61, 
  /* [57][0][][] */ -45,-44,-35,-21,-76,-76,52,-26,-127,-18,31,59,17,35,1,59, 
  /* [58][0][][] */ 50,-55,61,28,-1,-68,-29,9,34,-6,-127,-37,29,-37,-37,40, 
  /* [59][0][][] */ 51,-5,-125,96,-1,37,71,-14,-93,-35,41,-81,-94,-77,14,127, 
  /* [60][0][][] */ -1,20,-10,32,-22,-5,-15,-7,-37,-58,52,127,-44,-121,-27,3, 
  /* [61][0][][] */ -46,9,115,-71,-97,71,1,127,-1,-89,41,60,94,13,8,125, 
  /* [62][0][][] */ 67,27,15,-127,-32,-9,24,-44,-11,50,-44,35,38,-14,-80,-71, 
  /* [63][0][][] */ -4,-25,11,2,-60,-46,-40,-14,-83,-1,-46,2,127,-7,27,-1, 
  /* [64][0][][] */ 37,8,-19,52,-118,-40,-35,-96,35,126,27,-19,37,-61,-34,127, 
  /* [65][0][][] */ -48,-2,-34,-6,-104,100,20,-24,62,-111,127,-94,103,74,-125,82, 
  /* [66][0][][] */ -127,78,-83,-91,24,-48,-121,-43,-102,101,114,37,-94,-55,42,59, 
  /* [67][0][][] */ 4,-30,-127,-115,69,72,15,-29,-22,-4,30,-19,32,20,2,53, 
  /* [68][0][][] */ 68,35,-18,-35,-74,56,11,46,-54,59,113,-40,4,-34,-127,-11, 
  /* [69][0][][] */ 54,-89,47,-51,21,-99,-23,127,3,54,47,60,-34,57,-33,-1, 
  /* [70][0][][] */ 47,-10,127,38,84,-35,127,0,29,37,-91,18,-44,75,-72,47, 
  /* [71][0][][] */ 17,34,113,-81,-127,-100,32,13,-33,-14,24,-117,-100,15,30,14, 
  /* [72][0][][] */ -58,-99,28,-127,74,-7,12,58,-82,14,-115,-31,68,106,-57,123, 
  /* [73][0][][] */ 8,18,46,14,102,-87,-51,22,-7,99,-42,13,-88,-48,127,-21, 
  /* [74][0][][] */ -95,-9,-127,-42,48,-23,-21,30,-66,3,-92,-5,-11,-64,-50,84, 
  /* [75][0][][] */ 69,-36,50,-31,13,-11,-127,-35,8,-86,60,-3,12,-2,1,-6, 
  /* [76][0][][] */ 11,-44,-17,85,33,69,87,-68,58,-92,54,127,36,-68,-24,25, 
  /* [77][0][][] */ -39,-39,127,-30,22,-46,-28,-117,3,6,42,93,57,37,30,3, 
  /* [78][0][][] */ -42,-14,15,-19,-5,-38,48,-26,9,1,-7,-51,-38,-67,-127,-22, 
  /* [79][0][][] */ -127,-120,-34,30,124,19,-27,24,10,60,-13,41,-38,-95,-44,7, 
  /* [80][0][][] */ 15,-127,23,72,-19,-8,-60,89,-42,44,57,15,-65,-21,-1,88, 
  /* [81][0][][] */ 122,55,-20,78,-16,8,21,112,24,4,114,60,127,1,89,-32, 
  /* [82][0][][] */ -54,-10,7,-20,35,-127,-106,-83,23,92,-53,-39,-30,66,-98,5, 
  /* [83][0][][] */ 33,-31,96,1,-32,-24,-127,-12,37,-74,14,-46,3,11,24,5, 
  /* [84][0][][] */ 25,-69,-97,26,127,24,31,53,-108,15,-98,-27,15,-40,-86,9, 
  /* [85][0][][] */ 4,66,44,-34,72,-12,37,-109,127,-32,35,8,95,-97,36,-4, 
  /* [86][0][][] */ 102,-45,127,42,20,-67,84,38,-58,-38,-68,-44,26,30,-46,10, 
  /* [87][0][][] */ -11,6,27,-105,86,-42,-53,55,25,-51,81,-74,-117,-127,1,16, 
  /* [88][0][][] */ -70,-40,50,-3,9,17,-76,-42,-2,20,-62,-127,-36,-29,-3,-9, 
  /* [89][0][][] */ -90,-6,32,-62,24,2,-127,16,78,34,-72,-1,3,-85,-61,-2, 
  /* [90][0][][] */ -14,-27,-39,-80,127,39,-59,32,34,79,45,-3,56,18,-63,-5, 
  /* [91][0][][] */ -39,-60,31,31,-15,-2,-2,124,-60,-82,43,-23,-37,76,31,127, 
  /* [92][0][][] */ -16,83,9,-8,-21,52,-90,40,-32,-12,56,-16,-33,127,68,11, 
  /* [93][0][][] */ -15,57,-43,-46,54,74,-71,15,69,82,74,49,-127,29,-42,74, 
  /* [94][0][][] */ 18,66,101,13,-127,-32,-7,-1,55,-7,37,-54,-58,-15,23,-14, 
  /* [95][0][][] */ 1,27,33,0,127,-8,-54,84,12,9,-84,81,-19,22,83,-50, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0027895672246813774, 0.0038678785786032677, 0.0028772293590009212, 0.001942763919942081, 0.0025607903953641653, 0.0032859267666935921, 0.0032004176173359156, 0.0029627108015120029, 0.0027001139242202044, 0.0047862567007541656, 0.0025717159733176231, 0.0030790448654443026, 0.0027105300687253475, 0.0019127298146486282, 0.0031182575039565563, 0.0024538026191294193, 0.0035952695179730654, 0.003465898334980011, 0.0037309352774173021, 0.0018182439962401986, 0.0034074506256729364, 0.0032266152556985617, 0.0024003488942980766, 0.0035958043299615383, 0.0039784838445484638, 0.0036965236067771912, 0.0026826609391719103, 0.0029889519792050123, 0.0026058750227093697, 0.0027343523688614368, 0.0024465564638376236, 0.003206007182598114, 0.0035582366399466991, 0.0025331855285912752, 0.00213280925527215, 0.002361121354624629, 0.0026997271925210953, 0.0026571291964501143, 0.0025371452793478966, 0.0019637108780443668, 0.0032485181000083685, 0.0027891090139746666, 0.0024542876053601503, 0.0024838941171765327, 0.0035470777656883001, 0.0024049354251474142, 0.0027546151541173458, 0.0025302693247795105, 0.0019949194975197315, 0.0030192288104444742, 0.0036138808354735374, 0.0023540880065411329, 0.0020792949944734573, 0.0022243720013648272, 0.0034689046442508698, 0.003680309746414423, 0.0027245222590863705, 0.002575879218056798, 0.00401308573782444, 0.0024373196065425873, 0.0031974334269762039, 0.0029989622998982668, 0.0043052737601101398, 0.0029030726291239262, 0.0016206329455599189, 0.0022998363710939884, 0.0019474851433187723, 0.0021104700863361359, 0.0026234977412968874, 0.0027682313229888678, 0.0029118834063410759, 0.0019555957987904549, 0.0024832668714225292, 0.0030654494185000658, 0.0024572962429374456, 0.0018014111556112766, 0.0024910529609769583, 0.0023773345164954662, 0.0036593913100659847, 0.0030284207314252853, 0.0018412285717204213, 0.003123315516859293, 0.0032895228359848261, 0.003966156393289566, 0.0029894143808633089, 0.0026240148581564426, 0.0040503004565834999, 0.0028235879726707935, 0.0030587948858737946, 0.0037445665802806616, 0.0025715269148349762, 0.0029019997455179691, 0.0029580811969935894, 0.0025320020504295826, 0.0036141818854957819, 0.0031526724342256784, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 3905, 6372, 1315, 4262, 2317, 5388, 85, 1866, 13284, -1934, -8972, 3636, -10484, 12416, 4078, 11368, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.4791594923008233e-05, 0.00010766575724119321, 6.6606298787519336e-05, 7.377967267530039e-05, 9.0524357801768929e-05, 9.199263877235353e-05, 6.6015752963721752e-05, 7.590901805087924e-05, 0.00012722337851300836, 0.00010082976950798184, 5.8946392528014258e-05, 9.2072994448244572e-05, 0.00011846088455058634, 7.2900591476354748e-05, 0.00013033348659519106, 8.585790783399716e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -92,48,62,6,-54,-22,-59,8,-32,0,7,-25,21,27,28,-34,28,12,79,15,6,-44,127,59,43,22,21,23,-33,-113,-55,-1,-20,-36,23,19,17,47,-7,49,2,20,-86,-2,-45,-22,3,84,-26,-8,-53,-15,26,5,17,-53,-80,-1,-19,80,62,30,9,3,-29,-61,-31,25,-50,-55,42,-23,-7,-3,-73,-46,-32,11,-18,-1,-47,52,80,-68,-1,50,9,49,19,-13,6,-29,-33,-11,-46,6, 
  /* [1][0][][] */ 32,50,30,-14,-63,-33,-37,11,4,-6,83,-62,-4,-33,-90,-33,32,12,-46,43,-15,-75,22,65,-7,-71,10,-43,86,-102,127,-75,75,41,1,77,50,66,-28,-23,38,34,-16,-12,19,58,-112,-35,-79,-43,-19,-5,63,-47,-49,34,28,1,-22,18,13,53,12,-89,-23,-4,-52,-2,11,-6,-55,-39,-55,-33,8,-69,23,44,31,-83,-23,-26,-63,-44,23,-30,-23,14,-50,-18,-52,47,31,86,-40,65, 
  /* [2][0][][] */ 72,-31,11,7,16,-83,69,18,-3,-3,-46,2,-77,-26,10,-51,-101,-28,-41,53,18,-36,-42,1,-10,-48,-2,-21,-41,20,-94,127,-72,99,-36,-13,-43,6,-20,-25,-79,75,85,5,-100,-8,-18,-18,51,19,-16,-41,61,-12,-37,65,34,-8,41,6,5,32,-68,15,84,14,-15,-7,-7,61,-31,18,52,45,80,33,10,-72,76,45,80,-15,-38,30,-56,40,22,55,11,23,-18,-8,-52,47,-8,25, 
  /* [3][0][][] */ 0,18,-24,13,33,-14,-10,-47,-51,50,21,54,25,2,-41,37,-10,-35,35,22,13,127,24,-58,10,6,-37,6,68,-32,56,-9,-11,30,-28,-38,12,53,43,5,-79,-49,-22,14,-22,40,20,5,-20,-46,-5,-24,23,-92,-30,-47,7,83,-44,5,0,-18,-44,4,24,42,-34,19,-36,0,3,-64,-18,-52,26,-30,22,-19,-35,-30,-21,-20,-49,10,-2,-42,25,-21,-11,14,31,-31,39,11,-47,43, 
  /* [4][0][][] */ 46,-10,-27,11,23,32,-26,-5,-38,62,74,-12,-8,0,9,-40,11,-11,-18,32,6,-38,53,56,-55,-1,-127,26,-40,-61,-8,9,-72,-55,22,76,2,25,12,-4,-34,-43,38,-32,-24,1,-33,48,-28,60,11,13,24,-5,-64,10,43,-9,21,-16,35,-17,47,14,-53,11,-25,-3,-29,20,-51,60,30,-53,-23,-47,26,-35,-25,15,-34,78,-61,11,-24,2,21,-39,40,24,15,16,-50,-44,34,32, 
  /* [5][0][][] */ -112,37,50,-28,45,-17,55,-21,-18,35,-12,-39,31,-18,1,-44,-3,-13,51,22,-127,-14,-63,23,-37,-12,45,8,38,-87,-13,45,31,111,-15,3,5,42,41,-1,-37,84,63,-30,5,61,50,-9,7,6,-31,28,-7,-50,31,-77,37,-44,-47,-62,63,93,-36,-19,77,-41,-80,-52,-45,-15,-81,-29,-13,22,-34,-47,41,-45,-40,-1,107,-1,43,-78,-85,43,46,-11,-44,52,27,14,-17,13,-2,85, 
  /* [6][0][][] */ 25,-16,-81,-9,-50,-102,127,103,-71,64,-30,65,-110,-68,79,51,-12,-60,1,-17,-4,-36,-59,-81,-11,56,65,33,41,18,100,-61,27,-12,5,-113,23,23,-8,85,-3,10,-59,-40,-9,-51,-74,35,79,-91,-22,49,-22,44,-21,-65,53,34,10,27,-81,38,-118,-4,30,16,-6,54,42,18,-15,-46,-43,24,100,39,56,-52,55,-70,-24,-47,-87,63,21,-42,40,-11,-61,72,59,30,-35,-7,-31,115, 
  /* [7][0][][] */ 65,58,-42,-82,-14,4,49,-13,-100,11,9,-79,-42,16,9,-11,-21,-47,-22,52,-11,113,22,55,-18,13,19,65,50,43,50,-34,82,33,-18,33,-15,-38,17,21,-59,-16,2,-81,12,-63,62,0,41,-64,-82,-41,-86,32,-2,-2,7,23,-86,-16,9,85,69,-5,-13,-7,-68,23,3,-26,-127,53,21,107,-27,59,-79,78,-9,-92,-17,-60,74,-72,66,-52,-38,7,3,62,-84,65,54,-56,-42,37, 
  /* [8][0][][] */ 6,79,-64,33,-25,-21,-99,26,-64,-32,19,1,-48,17,38,76,24,-34,4,36,35,6,11,5,-61,75,10,20,-13,-11,-37,-28,-40,-43,-15,-53,-55,44,35,14,3,-37,31,10,-33,-43,6,1,-47,-30,56,101,16,-41,-67,95,-10,30,-1,-35,-56,18,-1,57,-24,-47,-35,-20,-51,15,20,-1,-15,-48,-127,-23,-41,46,-68,-46,-30,14,-25,-42,-13,-13,37,38,21,26,-75,-8,-72,-107,15,-61, 
  /* [9][0][][] */ -6,1,-58,44,-24,-26,78,66,-8,48,-55,104,-31,-1,42,104,18,30,48,-3,7,14,39,-114,-28,-11,20,-1,-5,-32,14,45,-54,-9,0,-127,14,-17,-9,-54,-21,9,42,-31,-41,-12,11,-4,40,74,27,-1,-46,-60,10,-19,-12,-13,72,9,-51,45,-53,-20,57,0,-9,-7,-64,24,28,52,-5,76,-8,-11,-24,31,-47,-2,61,-21,60,14,21,11,-24,-24,-52,35,-8,-26,29,22,-43,-12, 
  /* [10][0][][] */ 42,19,-33,-22,-7,-30,53,21,13,-39,-13,-15,-86,-10,4,-6,-81,-16,23,17,42,32,11,0,-44,64,24,-12,-25,-74,-27,-4,74,-40,33,13,55,-67,91,127,15,-59,16,4,-1,-63,-11,35,30,84,-62,-53,-23,9,7,48,17,-55,69,59,-12,52,-46,-18,0,-55,7,55,6,-29,-30,41,118,22,0,-65,17,-49,46,-15,-46,16,49,33,-20,0,28,27,-38,-5,36,64,40,49,-40,10, 
  /* [11][0][][] */ -72,-37,61,-79,10,-1,-37,-24,65,-33,23,-1,5,-10,32,-2,-59,-3,53,8,-52,30,-66,-117,34,15,-33,60,45,-81,67,-40,17,-2,13,-9,-71,53,-116,34,-73,91,-45,54,16,-5,22,-60,40,-37,-93,-46,-9,32,97,-68,11,-67,26,-70,-28,-41,-14,-127,12,-65,54,95,107,33,53,-41,-37,-26,53,-59,120,21,37,61,-6,21,-27,93,79,17,13,-35,-94,-25,4,40,60,31,39,69, 
  /* [12][0][][] */ 24,-43,-15,-53,17,87,-3,13,43,36,-11,50,14,48,31,-18,-44,43,4,31,127,-1,59,-99,30,34,-58,-77,-17,64,-17,-7,14,-13,2,-60,19,-5,-25,3,23,-2,34,67,-29,29,4,-7,-48,18,8,22,2,-47,10,28,-38,46,26,53,44,-82,-27,-97,17,93,-21,-49,-22,-40,66,-10,-10,8,-9,67,-19,36,-57,-6,-19,47,116,13,-6,68,-22,-62,50,22,-72,52,81,9,-22,-110, 
  /* [13][0][][] */ -16,34,-39,-38,-28,-22,21,-67,-3,-51,-6,-71,49,-97,-61,-69,-2,-29,-96,-19,-125,-41,36,102,-48,15,107,13,34,-55,46,53,8,-25,-103,111,-53,-94,37,-75,127,-1,-3,37,-26,-82,50,-18,83,14,-55,12,30,-2,-12,84,56,-46,-56,37,92,27,23,-93,-13,25,-48,3,-69,-34,-83,0,-75,33,-39,-62,-120,39,19,82,-22,45,36,-111,83,19,16,-12,-41,48,-9,2,-49,1,-24,6, 
  /* [14][0][][] */ -22,44,-60,-9,97,62,-92,-22,33,-71,44,-13,-10,-17,-57,-71,-54,43,26,127,21,-33,5,17,-4,41,-16,66,25,-22,-21,16,89,-6,-37,-20,-11,46,49,8,66,0,22,18,-6,-64,58,-62,32,-21,-45,-34,68,35,-25,19,31,47,-93,14,-11,-61,-27,-102,19,-55,-45,19,-79,57,-13,48,-15,-34,-9,-31,38,-18,-30,-43,19,-27,-14,-13,-5,65,-14,-9,-38,68,65,-7,-5,-34,-54,-65, 
  /* [15][0][][] */ -90,-69,62,-87,7,-4,-17,-84,-6,28,-28,91,9,-28,27,111,-121,-32,32,-82,34,-25,-6,-75,71,5,41,-43,-88,-97,-64,45,-64,57,69,-107,-9,-51,0,-39,-26,-8,36,-2,-25,-18,74,85,-22,-24,32,-58,-61,64,21,-63,-119,-8,127,9,-39,13,-100,44,-55,5,15,30,56,-67,71,-18,48,-22,-20,-35,18,1,44,20,-11,66,48,54,-18,-5,-127,11,-10,-39,-99,59,43,-58,-9,84, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0027536428533494473, 0.0045757945626974106, 0.0028307675383985043, 0.0031356359831988811, 0.0038472851738333702, 0.0039096870459616184, 0.0028056693263351917, 0.0032261332962661982, 0.0054069934412837029, 0.0042852652259171009, 0.0025052216369658709, 0.0039131022058427334, 0.0050345873460173607, 0.0030982750467956066, 0.0055391727946698666, 0.0036489609628915787, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1774, -3784, -1408, -1459, 1093, -2379, 480, -2745, -2119, -9272, 2865, -1538, 395, 7803, 7682, -2558, 14551, 3940, -8056, 495, -1799, 2733, -9670, 420, 309, -4172, -3985, -3086, 69, -4497, -930, -193, 8973, -483, -1494, -183, -111, -1436, -1663, 7967, 1575, -3279, 1585, -5305, 5262, 4891, 470, 11853, -512, 9715, 8433, -3588, -188, 402, 977, 8185, -1328, -1205, 7311, 3498, 3521, 10843, -771, -4186, 3912, 1946, -2614, 3423, -2940, -851, 3842, -473, 11641, -188, -1038, 10073, -977, 204, 7301, 1205, 2169, 16637, 491, 1854, 12788, 3, -4337, -1799, -2358, -5175, 13292, 114, 4320, 1933, -7844, -3028, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00029119552345946431, 0.00016133300960063934, 0.00014329899568110704, 0.00036395565257407725, 0.00028272619238123298, 0.00029890626319684088, 0.00034219410736113787, 0.00026524640270508826, 0.00020093031344003975, 0.00015979362069629133, 0.00013838658924214542, 0.00034340281854383647, 0.00023519163369201124, 0.00012817764945793897, 0.00022012315457686782, 0.00019326717301737517, 0.00014042244583833963, 0.00026611430803313851, 9.7956784884445369e-05, 0.00013886431406717747, 0.00026463711401447654, 0.00047472689766436815, 0.00023811026767361909, 0.00029374525183811784, 0.00066581851569935679, 0.00020207320631016046, 0.00035007612314075232, 0.00013692564971279353, 0.00020576917449943721, 0.00012394327495712787, 0.00039994422695599496, 0.00017856087652035058, 0.00021497929992619902, 0.00017301809566561133, 0.0002467529266141355, 0.00033106704358942807, 0.00024281394144054502, 0.00030077359406277537, 0.00039565528277307749, 0.00019838075968436897, 0.00020707151270471513, 0.0001686138566583395, 0.00030625236104242504, 0.00019504599913489074, 0.00014400009240489453, 0.00016915421292651445, 0.0002039440005319193, 0.0001306596677750349, 0.00026869762223213911, 7.2788723628036678e-05, 0.00016551863518543541, 0.0001328078651567921, 0.00022711715428158641, 0.00014512943744193763, 0.000245250528678298, 0.00018665431707631797, 0.00014758504403289407, 0.00017412236775271595, 0.00028101459611207247, 0.00015804397116880864, 0.00023029951262287796, 0.00012760829122271389, 0.00021838258544448763, 0.00010902625217568129, 0.00018921401351690292, 0.00026536107179708779, 0.00017153186490759254, 0.000173955675563775, 0.0001983747206395492, 0.00021627424575854093, 0.00026329117827117443, 0.00017289885727223009, 9.9689277703873813e-05, 0.00024398571986239403, 0.00028611707966774702, 0.0001028799670166336, 0.00019632199837360531, 0.00020975306688342243, 0.00016227379092015326, 0.00021721143275499344, 0.00028678367380052805, 0.00012722937390208244, 0.00034612146555446088, 0.00029513161280192435, 8.802227966953069e-05, 0.00023946551664266735, 0.00017327335081063211, 0.00014849577564746141, 0.0002786138211376965, 0.0001608947932254523, 8.6804968304932117e-05, 0.0015582435298711061, 0.00021825157455168664, 0.00015948095824569464, 8.2909566117450595e-05, 0.00035297157592140138, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 36,102,38,-9,-41,18,45,29,89,-43,-78,48,-30,-21,0,-71,-85,6,18,28,31,32,127,99,5,-47,-49,-13,-36,15,33,-30,-51,-4,-38,49,26,14,13,-53,15,-22,-8,2,-127,25,17,-40,2,-59,-34,29,27,60,-22,-4,-99,-51,-21,-113,-125,-13,-15,-22,-39,11,49,-19,-42,29,23,9,-56,-4,34,-10,0,-50,-74,25,-10,-32,25,-52,-125,-49,-35,11,-127,-9,-76,32,57,-24,42,-1, -43,-20,-39,78,-16,110,-43,4,98,53,-120,37,-55,-67,-127,127,-127,43,97,127,80,-23,121,93,28,6,24,74,16,103,5,-127,127,72,9,37,42,127,-17,-127,127,-8,89,127,-9,-68,127,-60,-6,-106,-32,-17,-11,127,-41,-127,11,45,-38,-44,56,-127,32,89,-38,64,112,-35,15,127,127,-16,-92,42,-40,-96,27,-69,-9,127,-20,-93,127,-56,-127,-38,53,27,103,55,-67,1,101,-51,127,34, 36,-100,-39,-5,-31,10,-15,34,48,64,-109,-49,4,55,-6,-26,-1,-4,20,35,10,15,56,73,12,-81,5,7,12,-14,15,-80,-53,-90,-62,127,7,4,10,29,-19,39,-4,18,34,23,-17,9,25,-49,46,7,68,15,8,-18,48,-92,-23,-78,-66,31,-59,-48,31,3,-127,-40,-59,4,32,35,11,-54,-11,3,-13,13,-73,-21,-7,-58,12,-7,-43,-60,12,-34,-66,-31,-54,64,15,67,62,1, 
  /* [0][1][][] */ 94,25,93,127,-16,-38,127,52,-7,-66,-43,127,-4,-101,-49,12,-81,-56,125,20,-74,-19,-93,-127,-9,40,-78,127,-86,72,119,70,-10,74,15,64,-127,19,3,-113,44,-78,10,61,-108,-29,10,-109,-127,-99,-127,13,127,-94,63,-16,-124,18,-36,-22,27,-57,-39,48,-112,-18,94,-105,-59,1,-50,-127,-66,53,127,-79,127,81,-86,-56,127,-106,-33,46,13,-24,-11,127,1,45,-57,16,-5,-120,124,-23, -127,41,-60,34,-60,-127,-111,-127,127,47,20,57,-108,-127,-49,71,-101,-127,127,97,59,-127,-68,67,-127,127,40,74,-84,-7,-127,85,-58,86,127,-28,4,95,127,-19,-73,62,15,82,17,-127,-88,-127,-6,-127,-48,127,43,65,54,-66,43,43,55,-33,-23,-49,-127,127,-36,-127,72,127,19,75,-121,-76,-46,65,-106,-127,112,127,127,-64,-98,-44,-95,18,2,-89,127,102,126,127,-127,-127,-127,-101,97,127, 61,13,81,60,20,-15,18,31,-80,127,-40,49,7,14,-57,78,1,-29,50,-19,-127,-2,-61,-112,5,4,127,-38,127,127,22,-117,-40,-127,-9,122,-110,57,-9,23,-25,127,5,48,-46,3,-14,-76,116,-121,-71,47,122,-99,-127,63,127,-17,-127,85,-75,-81,3,68,127,-36,-115,-11,-79,3,-82,-8,-59,-127,-7,-5,-9,-18,-126,-64,-91,-105,-21,127,-56,42,15,-45,-30,-6,-24,107,-39,127,27,-1, 
  /* [0][2][][] */ 38,-101,49,-21,3,44,26,68,-46,13,127,-77,6,-25,-16,11,-52,4,33,59,28,32,49,-31,23,70,-7,-18,-10,-37,-17,26,-5,-5,-20,-32,62,24,16,-37,5,37,-22,-23,62,20,-30,8,-53,0,-67,28,-70,-17,-37,-21,-28,6,19,14,-98,33,59,-54,-52,58,-94,-45,76,3,34,55,-17,-3,24,5,-16,-41,2,-11,11,-6,-39,-14,-79,38,-29,37,-33,30,-7,27,-37,-5,17,-10, -58,26,127,8,127,84,-43,37,-116,53,-56,-62,127,-3,-26,3,58,42,36,-47,29,24,100,-46,68,-20,14,64,-38,91,-25,44,-119,38,28,21,79,30,13,-120,-11,14,-127,43,67,70,-48,-24,6,-90,-67,61,76,-77,-45,-63,-32,127,-29,2,127,-99,113,71,-62,15,-38,11,127,-13,-9,125,-127,30,-10,-93,10,-99,-100,-44,-11,-127,-11,-60,-30,127,73,-41,97,42,38,40,-32,-29,9,9, 14,127,44,-31,-35,-2,-34,47,-3,43,82,-4,19,-1,3,20,-53,18,24,54,-3,30,8,-97,10,73,24,62,19,-6,-5,-59,-34,-33,-12,71,43,19,-13,22,-4,4,13,9,-7,-51,-26,10,35,36,60,-35,-60,1,24,34,-18,-7,42,127,-8,0,89,-39,17,22,-115,64,41,-33,-24,102,-3,-2,-12,-19,-43,-13,31,-5,-17,-70,1,-11,-34,41,-7,-119,-51,6,21,25,-41,7,7,10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012375809252262115, 0.0068566529080271721, 0.0060902070254087448, 0.015468114987015724, 0.012015862390398979, 0.012703515589237213, 0.014543249271810055, 0.011272972449660301, 0.0085395378991961479, 0.0067912288941442966, 0.0058814301155507565, 0.014594619162380695, 0.0099956439808011055, 0.0054475497454404831, 0.0093552339822053909, 0.0082138543948531151, 0.0059679537080228329, 0.011309858411550522, 0.004163163248449564, 0.0059017329476773739, 0.011247077025473118, 0.020175892859697342, 0.010119685903191566, 0.012484172359108925, 0.028297286480665207, 0.0085881110280752182, 0.014878234826028347, 0.0058193397708237171, 0.008745189756155014, 0.0052675888873636723, 0.016997629776597023, 0.0075888368301093578, 0.0091366199776530266, 0.0073532690294086933, 0.010486998595297337, 0.014070348814129829, 0.01031959243118763, 0.012782877311110497, 0.016815349459648132, 0.0084311822429299355, 0.0088005391880869865, 0.0071660890243947506, 0.013015724718570709, 0.0082894545048475266, 0.0061200037598609924, 0.0071890540421009064, 0.0086676198989152908, 0.0055530359968543053, 0.011419648304581642, 0.0030935206450521946, 0.0070345420390367508, 0.0056443340145051479, 0.0096524786204099655, 0.006168000865727663, 0.010423147119581699, 0.0079328082501888275, 0.0062723639421164989, 0.0074002007022500038, 0.011943120509386063, 0.0067168683744966984, 0.0097877290099859238, 0.0054233521223068237, 0.0092812599614262581, 0.0046336157247424126, 0.0080415951088070869, 0.011277845129370689, 0.007290104404091835, 0.0073931161314249039, 0.0084309251978993416, 0.0091916555538773537, 0.011189875192940235, 0.0073482012376189232, 0.004236794076859951, 0.010369393043220043, 0.012159975245594978, 0.0043723983690142632, 0.0083436844870448112, 0.0089145051315426826, 0.0068966359831392765, 0.0092314854264259338, 0.012188306078314781, 0.0054072481580078602, 0.014710161834955215, 0.012543093413114548, 0.0037409467622637749, 0.010177284479141235, 0.0073641175404191017, 0.0063110701739788055, 0.01184108667075634, 0.0068380287848412991, 0.0036892110947519541, 0.066225349903106689, 0.0092756915837526321, 0.0067779403179883957, 0.0035236563999205828, 0.015001291409134865, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 3041, 1332, 150, -1387, 3446, 5713, 4498, 1529, -359, 3660, 885, -3178, 1666, 1087, 398, -333, 2699, 4543, -108, -606, 2486, 11706, 9847, -1468, -2533, -395, 6571, -378, 910, 798, 8412, -1410, 5400, 1588, 3001, -2882, 253, -3143, 1223, 1781, 1611, 776, 873, -59, 490, 1490, 3470, 1766, 2510, 1149, 3013, 1706, -1791, 1017, 678, 1369, 636, 2045, 5123, 557, -1165, 4157, 1109, 1996, 2143, 3529, -3582, 1515, 3655, -598, 4428, 792, 1631, 1374, 1912, 896, -494, 1339, 1220, 2447, 2352, 1650, 4302, 5, 2402, 3014, 392, -574, 7922, -38, 77, -4001, 6710, 1848, -95, -984, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023873215832281858, 0.00024276737531181425, 0.00024922931334003806, 0.00025715562514960766, 0.00018987043586093932, 0.0001409256219631061, 0.00018955036648549139, 0.00021988681692164391, 0.00027859536930918694, 0.00020307993690948933, 0.00027904415037482977, 0.00015209736011456698, 0.00027363834669813514, 0.00035418407060205936, 0.00020899531955365092, 0.00023284026246983558, 0.00020926265278831124, 0.00016036593297030777, 0.00021065803593955934, 0.00024547643261030316, 0.00024617250892333686, 8.2731115981005132e-05, 9.643693920224905e-05, 0.00022367168276105076, 0.00022888592502567917, 0.00021470226056408137, 0.0001238913246197626, 0.00029103999258950353, 0.00026739950408227742, 0.00024584759376011789, 0.0001095011321012862, 0.00018940959125757217, 0.0001540693046990782, 0.00031131363357417285, 0.00026016481569968164, 0.00022768694907426834, 0.00026878353673964739, 0.00020181408035568893, 0.00015087200154084712, 0.00023326113296207041, 0.00028000512975268066, 0.00028058938914909959, 0.00034497102024033666, 0.00031796953408047557, 0.00036992348032072186, 0.00017427295097149909, 0.00015751944738440216, 0.00031793411471880972, 0.00022651697508990765, 0.00034754970693029463, 0.00024617896997369826, 0.00027624025824479759, 0.00023148219042923301, 0.00035438730265013874, 0.00036073671071790159, 0.00034410812077112496, 0.0003452044038567692, 0.00021545580239035189, 0.00015896311379037797, 0.00027807985316030681, 0.00030096250702627003, 0.00016706461610738188, 0.0003049799706786871, 0.00028347485931590199, 0.00028734374791383743, 0.00021058552374597639, 0.00016810047964099795, 0.00030582631006836891, 0.00019739326671697199, 0.00027975469129160047, 0.00015803669521119446, 0.00017452778411097825, 0.00025751072098501027, 0.00025424224440939724, 0.00027359262458048761, 0.0001958885695785284, 0.00030584019259549677, 0.00018044436001218855, 0.00027361811953596771, 0.00021711361478082836, 0.00018766090215649456, 0.00024377909721806645, 0.00017662286700215191, 0.00020077226508874446, 0.00019412892288528383, 0.00022426721989177167, 0.00027411282644607127, 0.00042571808444336057, 0.00011769356933655217, 0.00035774719435721636, 0.0003734833444468677, 0.00013592910545412451, 0.00012919701111968607, 0.00025570424622856081, 0.00038059949292801321, 0.00021331156312953681, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -24,44,0,-28,-44,-41,-80,3,86,-48,66,-64,64,-74,-9,-127, 
  /* [1][0][][] */ -94,72,-65,-77,-74,49,60,46,-51,19,54,-62,43,127,-10,51, 
  /* [2][0][][] */ -72,-6,-83,8,-15,-20,47,-62,-79,127,52,10,54,49,-70,106, 
  /* [3][0][][] */ -42,-73,-2,-64,-87,11,-50,-118,-2,10,44,-81,-56,-42,-127,-25, 
  /* [4][0][][] */ 70,-15,24,67,-81,-12,-127,60,53,90,9,44,17,-4,-23,-51, 
  /* [5][0][][] */ -99,56,-78,-47,60,-42,9,-52,90,10,13,-57,53,-127,-125,-73, 
  /* [6][0][][] */ -12,-23,-25,13,-103,64,20,-42,-5,-57,127,-44,31,15,-100,0, 
  /* [7][0][][] */ -37,97,127,-63,39,45,-39,-60,40,54,-60,-1,34,3,23,39, 
  /* [8][0][][] */ -47,4,26,-26,38,8,81,127,-44,-15,-48,-93,28,81,-99,-70, 
  /* [9][0][][] */ 18,17,44,5,-82,-58,-106,-77,38,-23,127,31,-33,-75,34,-35, 
  /* [10][0][][] */ -8,-62,13,-76,-73,63,71,32,9,-98,1,46,-52,26,-127,21, 
  /* [11][0][][] */ 100,-81,-21,91,-113,-39,50,0,127,124,-47,51,60,-54,-27,99, 
  /* [12][0][][] */ -60,-44,127,-6,58,-25,18,89,22,-42,74,44,-58,23,-86,12, 
  /* [13][0][][] */ 7,-42,12,37,-9,39,127,38,-92,4,-6,0,-4,100,88,-63, 
  /* [14][0][][] */ 127,-94,113,-2,20,49,61,26,41,104,56,66,73,-27,57,-37, 
  /* [15][0][][] */ 11,119,3,-57,34,127,-75,84,-40,-9,-25,-22,-11,118,-36,-53, 
  /* [16][0][][] */ -38,72,100,-63,31,93,17,-26,-1,14,-23,41,90,-2,83,127, 
  /* [17][0][][] */ -23,95,67,-115,29,-78,-28,-78,-51,93,-27,34,-94,-35,127,-49, 
  /* [18][0][][] */ -123,9,-72,-91,127,74,-33,-97,52,113,122,109,-9,93,-46,-14, 
  /* [19][0][][] */ 26,101,99,81,30,-23,-29,-5,-8,127,54,95,50,54,-54,46, 
  /* [20][0][][] */ 60,-13,20,70,-44,25,-12,45,-33,-4,-127,-25,95,-20,56,3, 
  /* [21][0][][] */ -102,-127,-33,108,-20,15,-113,43,56,-4,35,37,-4,25,-103,21, 
  /* [22][0][][] */ -5,-50,-62,6,120,4,-74,106,70,127,47,108,-26,86,25,35, 
  /* [23][0][][] */ -48,11,-31,2,56,69,127,104,-7,102,-25,-18,-16,27,-89,-28, 
  /* [24][0][][] */ 11,-89,38,26,127,43,94,-37,78,25,47,36,-76,30,-4,-20, 
  /* [25][0][][] */ 104,-30,104,11,23,-17,-21,77,127,-19,-88,-20,103,-73,71,21, 
  /* [26][0][][] */ 33,19,127,67,80,27,-46,-10,21,90,-31,114,67,-49,30,-51, 
  /* [27][0][][] */ -54,44,-73,12,-18,107,28,-115,21,-55,121,47,43,-48,127,121, 
  /* [28][0][][] */ -6,28,-61,-127,6,-75,4,-85,-100,77,-67,4,8,37,-22,48, 
  /* [29][0][][] */ 74,97,-53,25,42,39,-37,-12,51,21,21,62,-127,1,-39,70, 
  /* [30][0][][] */ -47,122,-95,-91,39,-40,-20,46,-124,74,-126,-53,50,65,-12,127, 
  /* [31][0][][] */ 50,-93,107,27,56,-117,-116,19,-49,7,52,-42,-93,41,61,127, 
  /* [32][0][][] */ -60,77,0,50,-127,86,0,54,33,-99,17,-96,21,41,48,86, 
  /* [33][0][][] */ -90,-18,71,95,-12,6,-65,26,-49,-53,15,-22,-5,-16,14,127, 
  /* [34][0][][] */ -9,-4,-79,-55,34,-12,-8,54,9,9,8,6,-38,-10,-19,127, 
  /* [35][0][][] */ 45,0,33,-31,11,25,-70,-40,-31,-127,-67,31,5,-29,32,-23, 
  /* [36][0][][] */ -15,-28,-127,-10,-15,118,-32,42,18,10,68,25,53,31,-53,52, 
  /* [37][0][][] */ 46,22,65,-39,61,-127,26,-35,-120,48,-94,-24,10,24,102,55, 
  /* [38][0][][] */ -41,127,23,-78,60,12,87,-92,-4,-23,-109,55,-66,-110,-97,25, 
  /* [39][0][][] */ 123,28,-127,-118,-44,0,15,-54,19,13,-9,-50,109,2,-114,-95, 
  /* [40][0][][] */ -68,1,-68,-71,-71,-11,-4,-127,-10,12,-20,-55,48,90,52,83, 
  /* [41][0][][] */ -36,-80,-27,127,-11,-10,-59,-12,-13,-47,67,-71,-72,4,5,47, 
  /* [42][0][][] */ -23,62,-33,-127,13,22,18,-18,46,-14,-27,8,67,-18,-30,13, 
  /* [43][0][][] */ -15,53,14,6,115,24,19,20,17,37,-19,-90,-127,-53,-17,-24, 
  /* [44][0][][] */ 97,-16,30,15,-26,-50,34,27,41,-66,19,8,127,-1,-87,-35, 
  /* [45][0][][] */ 4,-110,-81,48,-50,-127,-12,40,56,-41,16,14,-101,114,17,-62, 
  /* [46][0][][] */ -31,-100,66,89,-6,-9,-127,90,40,-49,50,-48,44,107,68,119, 
  /* [47][0][][] */ -33,-60,19,71,-11,-27,47,9,-17,-70,-127,-28,33,-40,-56,28, 
  /* [48][0][][] */ -127,61,-11,-30,-5,55,-7,-107,29,-21,39,-61,70,-99,-38,11, 
  /* [49][0][][] */ -61,-8,36,-31,8,-6,98,127,-36,-25,19,28,-43,38,-43,25, 
  /* [50][0][][] */ 47,26,-68,27,58,-117,-30,3,-86,42,-53,1,20,-68,-127,-54, 
  /* [51][0][][] */ -48,49,-28,100,-30,48,-60,-63,-67,-84,-3,-70,8,18,8,127, 
  /* [52][0][][] */ -127,-9,23,-16,38,38,73,13,6,-89,-42,-43,-79,-54,-102,-4, 
  /* [53][0][][] */ -45,-69,-52,-127,-33,-20,13,93,42,-46,-51,2,-12,23,63,88, 
  /* [54][0][][] */ 18,-23,19,6,-37,45,32,-16,-44,-80,48,12,-31,-22,-127,7, 
  /* [55][0][][] */ -18,-20,-22,43,63,-51,78,43,-45,-54,-127,-10,39,-35,-35,36, 
  /* [56][0][][] */ 11,-24,-86,-12,-127,7,-49,-16,-14,9,-13,2,77,-25,7,51, 
  /* [57][0][][] */ -48,32,35,-59,127,45,29,16,-60,19,10,3,-53,94,-120,-44, 
  /* [58][0][][] */ 36,22,-4,-24,41,-19,-65,-64,18,-127,-44,21,-70,-32,-26,56, 
  /* [59][0][][] */ -62,1,-28,5,4,56,-83,-32,50,127,-55,11,1,26,-11,28, 
  /* [60][0][][] */ 18,-51,-3,17,-127,-21,44,11,-1,27,-17,31,6,-44,25,17, 
  /* [61][0][][] */ 7,35,-94,2,-45,-39,-127,-61,-25,-15,58,118,48,-39,92,70, 
  /* [62][0][][] */ 20,-9,38,-11,18,36,55,127,-46,105,29,64,1,14,52,114, 
  /* [63][0][][] */ 40,-127,-15,-8,-60,21,46,-14,-2,-16,-3,3,-27,127,114,38, 
  /* [64][0][][] */ -40,-17,-101,-36,11,59,37,-9,2,-36,30,-11,70,-20,-56,127, 
  /* [65][0][][] */ -16,-22,94,63,66,-47,65,114,-45,-34,-127,-74,31,100,-31,-43, 
  /* [66][0][][] */ -61,-111,-4,-102,-89,-127,67,-47,7,-32,19,64,-61,-57,-102,94, 
  /* [67][0][][] */ -32,-127,-110,-15,-78,112,-12,-102,-75,-3,-8,-63,23,37,-50,58, 
  /* [68][0][][] */ 127,2,42,7,-49,-5,-69,-46,-45,-99,-18,13,52,4,53,-72, 
  /* [69][0][][] */ 57,2,50,-23,6,-49,-66,24,-1,127,-30,12,0,28,59,-51, 
  /* [70][0][][] */ 38,-3,-19,29,-94,47,-6,-94,96,127,0,76,54,-15,-17,29, 
  /* [71][0][][] */ 104,-127,107,110,-99,-38,-5,19,122,40,-68,88,120,-73,50,121, 
  /* [72][0][][] */ -25,-46,37,100,24,5,-127,87,65,13,49,-3,-31,-55,-51,85, 
  /* [73][0][][] */ 92,-4,64,-112,42,-127,-65,45,2,95,-50,27,39,-74,54,-42, 
  /* [74][0][][] */ 105,2,38,64,-127,-9,69,9,-87,-45,18,-73,36,-72,-9,28, 
  /* [75][0][][] */ 89,127,-77,13,49,39,-49,-64,-62,-30,12,67,-87,58,69,70, 
  /* [76][0][][] */ -48,-27,11,-11,-58,-3,78,-11,-74,40,77,53,-49,-127,-12,84, 
  /* [77][0][][] */ -96,127,-19,15,-57,-114,77,84,96,-91,-30,85,-57,41,-14,103, 
  /* [78][0][][] */ 127,50,-54,24,-82,29,-116,-48,-18,-6,-79,23,12,-123,49,67, 
  /* [79][0][][] */ -56,-3,127,51,-19,-69,-48,-38,-37,2,42,-6,-62,117,-60,39, 
  /* [80][0][][] */ 64,127,33,-114,21,62,68,-14,23,26,-37,28,77,-44,6,-25, 
  /* [81][0][][] */ 25,-56,4,-127,120,31,-28,98,77,59,0,-28,-23,28,-87,-55, 
  /* [82][0][][] */ 67,42,89,-16,127,-96,39,42,1,99,-11,19,18,-24,59,-114, 
  /* [83][0][][] */ -39,84,37,-18,51,127,124,89,7,100,-57,-41,-41,111,-59,-93, 
  /* [84][0][][] */ 9,-73,-1,91,42,-95,-57,36,-66,27,-38,3,-127,58,-14,-72, 
  /* [85][0][][] */ -83,82,-21,10,-38,-64,-54,-57,-4,89,-6,-42,-127,-40,-28,43, 
  /* [86][0][][] */ 4,63,127,125,45,-46,42,-3,24,57,-68,-87,23,60,-119,-90, 
  /* [87][0][][] */ -41,29,127,-25,-93,-12,25,13,40,-3,9,34,-33,24,-8,12, 
  /* [88][0][][] */ -20,-57,-58,18,46,26,-9,20,-23,-33,-107,-96,127,-22,23,20, 
  /* [89][0][][] */ 35,32,-13,-127,-2,-79,-45,56,99,-23,51,-100,-23,-34,69,-49, 
  /* [90][0][][] */ 12,80,36,26,-43,46,51,117,-10,-60,-20,127,53,14,-46,91, 
  /* [91][0][][] */ -54,-2,-29,83,110,83,-33,-106,-40,64,-33,-4,-116,-127,-57,1, 
  /* [92][0][][] */ -20,70,4,-35,-127,-14,-76,63,-45,31,92,79,-10,-16,63,-6, 
  /* [93][0][][] */ 110,83,127,24,-76,-70,30,17,-68,-77,-25,-72,27,-40,-27,-58, 
  /* [94][0][][] */ -15,-127,33,-124,18,61,-6,-11,101,-22,-16,78,31,48,-82,44, 
  /* [95][0][][] */ -51,-92,-43,-64,127,127,-51,56,96,93,-95,77,-55,116,-66,29, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0025293917860835791, 0.0025721453130245209, 0.0026406103279441595, 0.0027245902456343174, 0.0020116968080401421, 0.0014931214973330498, 0.0020083056297153234, 0.0023297234438359737, 0.0029517465736716986, 0.0021516529377549887, 0.0029565016739070415, 0.0016114872414618731, 0.0028992264997214079, 0.0037526166997849941, 0.0022143269889056683, 0.0024669666308909655, 0.0022171593736857176, 0.0016990936128422618, 0.002231943653896451, 0.0026008482091128826, 0.0026082231197506189, 0.00087654468370601535, 0.0010217593517154455, 0.0023698245640844107, 0.0024250699207186699, 0.0022747926414012909, 0.001312641310505569, 0.0030835988000035286, 0.0028331251814961433, 0.0026047804858535528, 0.0011601757723838091, 0.0020068141166120768, 0.0016323801828548312, 0.0032983999699354172, 0.00275647290982306, 0.0024123666808009148, 0.0028477893210947514, 0.0021382409613579512, 0.0015985043719410896, 0.0024714258033782244, 0.0029666831251233816, 0.0029728736262768507, 0.0036550036165863276, 0.0033689199481159449, 0.0039193774573504925, 0.0018464399036020041, 0.0016689348267391324, 0.0033685446251183748, 0.0023999707773327827, 0.0036823248956352472, 0.0026082915719598532, 0.0029267938807606697, 0.0024525776971131563, 0.0037547701504081488, 0.0038220426067709923, 0.0036458610557019711, 0.0036574762780219316, 0.0022827764041721821, 0.0016842305194586515, 0.0029462848324328661, 0.0031887288205325603, 0.0017700669122859836, 0.0032312942203134298, 0.0030034454539418221, 0.0030444366857409477, 0.0022311753127723932, 0.0017810419667512178, 0.0032402612268924713, 0.0020914019551128149, 0.0029640297871083021, 0.0016744150780141354, 0.0018491399241611362, 0.0027283525560051203, 0.0026937227230519056, 0.0028987419791519642, 0.0020754595752805471, 0.0032404083758592606, 0.001911826548166573, 0.0028990122955292463, 0.00230034114792943, 0.0019882866181433201, 0.0025828646030277014, 0.0018713375320658088, 0.0021272029262036085, 0.0020568158943206072, 0.0023761342745274305, 0.0029042537789791822, 0.0045105270110070705, 0.001246975501999259, 0.0037903685588389635, 0.0039570946246385574, 0.0014401829103007913, 0.0013688557082787156, 0.0027092127129435539, 0.0040324907749891281, 0.0022600579541176558, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27155, -7675, 1992, -16505, 13214, -9300, 20545, -6590, 12042, -7576, 10183, 15732, -2897, -25664, -400, 7654, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.2680701375938952e-05, 7.2308168455492705e-05, 3.8610414776485413e-05, 7.265781459864229e-05, 0.00010061296779895201, 0.00016984716057777405, 4.7511199227301404e-05, 8.4407169197220355e-05, 0.00011008290312020108, 0.00012650452845264226, 8.1663718447089195e-05, 8.9367218606639653e-05, 7.7163211244624108e-05, 0.00014172244118526578, 6.2731363868806511e-05, 7.556044147349894e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 37,31,1,19,-8,-86,-10,3,-23,-76,15,-10,69,-62,55,55,-81,-14,19,6,95,17,-72,15,7,73,127,79,-3,86,56,-38,3,4,-5,-34,49,28,-7,-10,120,24,38,-19,-2,-1,7,-50,18,-45,85,-11,-82,-1,52,38,-7,-46,5,6,-2,36,-81,-17,5,1,55,21,-1,-26,8,39,17,66,9,46,58,-32,50,13,-9,52,62,31,-57,11,-5,77,10,1,-91,1,26,19,112,77, 
  /* [1][0][][] */ 33,48,-33,-7,9,-48,97,-72,-68,-32,-52,-58,0,-41,9,-49,-18,-20,-42,1,-11,-108,127,-32,10,12,15,59,-51,15,-46,37,-61,21,19,-3,-16,55,-37,92,27,22,-12,-55,76,-76,-1,20,-71,1,55,-122,-55,56,62,62,60,27,-77,19,-32,-19,6,-8,31,32,86,20,-62,-120,19,0,36,71,-25,30,-67,-25,88,-36,56,-29,60,-57,-22,-35,-22,-1,-29,-24,25,12,61,-57,-42,67, 
  /* [2][0][][] */ -4,-9,-6,-9,70,50,-56,28,-40,48,2,-21,31,-1,2,40,25,-30,-127,-3,-14,-29,-5,25,-8,-13,-58,27,-39,-16,-12,71,-22,-36,3,22,-47,31,-14,-37,78,11,11,35,7,57,11,-4,-79,14,-25,22,-35,62,8,-60,13,28,49,12,-17,3,-25,48,35,-8,-33,5,-4,2,-4,-33,14,55,34,75,-58,-18,-41,-32,34,33,66,-3,-11,-46,-28,-57,-21,-38,-13,81,2,4,80,-35, 
  /* [3][0][][] */ 43,-31,-15,-115,-15,-21,79,-39,43,110,-72,-9,17,-14,-34,57,49,33,-10,19,-61,15,17,0,-34,78,21,6,-40,-20,-63,59,6,-20,21,-28,-1,-56,0,48,9,21,-13,38,52,-63,5,39,49,-19,6,-37,88,62,3,9,-10,-18,-4,-33,-23,26,54,-6,-20,-21,127,-17,-34,-6,-44,28,14,-51,-2,-61,21,-48,116,5,-18,-39,-22,-37,-38,-21,62,64,-34,46,-58,20,15,-80,-29,36, 
  /* [4][0][][] */ -35,63,52,49,-28,21,-38,-22,18,-37,4,-8,12,59,-9,11,-30,-56,-17,-78,14,-25,-74,8,-25,-47,-33,10,-40,127,-53,-14,-1,-27,7,-47,64,50,-36,11,19,8,23,-50,-66,-5,59,-31,26,-9,-36,-4,-80,37,67,23,16,59,-16,40,-37,-76,-32,-2,59,22,-65,-21,-9,16,19,-86,-34,56,62,58,-42,40,-57,45,10,79,14,-68,44,-74,-26,-83,-41,-74,-60,-18,6,26,37,-35, 
  /* [5][0][][] */ -1,-26,38,-10,-13,1,-26,6,29,8,-12,-5,-15,-24,31,-24,-16,-11,-50,-36,-32,5,-18,10,32,-52,58,-28,3,39,2,64,-7,-82,21,11,-51,-39,-33,6,-48,-24,-39,1,-2,3,-76,21,-19,26,57,-11,33,-65,2,9,-14,-59,-21,-24,38,35,23,50,-37,-4,110,-34,-10,-23,13,14,0,12,36,16,2,-3,127,44,-34,-13,-54,30,41,70,7,87,3,-35,-11,-2,8,-17,-32,11, 
  /* [6][0][][] */ 43,-68,70,18,-29,115,-62,-58,-46,-71,-95,51,-5,19,-26,120,3,22,-9,-62,-127,-14,-73,-79,8,-70,-13,75,-126,60,10,-37,35,80,-40,-11,-14,-37,5,-4,-63,14,55,-41,-11,30,-83,-8,33,16,-73,-97,78,1,-54,-6,35,-34,-4,7,-5,-30,27,28,57,-82,-70,-75,-100,6,-5,-75,-17,-96,20,-88,103,30,-42,53,-40,78,28,-96,74,-51,-17,1,-56,67,-89,60,18,-42,77,-123, 
  /* [7][0][][] */ -32,1,-57,61,-7,4,25,2,-74,0,72,66,10,-59,8,-20,-23,-18,13,-18,-67,-5,-43,-47,83,43,7,52,10,31,18,23,-45,-127,36,112,-14,11,-48,5,5,-32,8,-61,16,66,80,82,-17,56,-19,20,20,-40,31,-33,-28,44,-67,-20,47,17,2,-34,67,-38,85,3,-55,-35,79,-29,-4,-40,-63,-29,36,-41,71,-16,-15,0,-87,-26,35,18,-83,40,7,-2,4,23,57,11,72,-4, 
  /* [8][0][][] */ -12,-56,1,14,-12,4,25,-14,-13,3,51,57,9,32,-41,-8,76,-9,-2,11,-3,-86,-28,1,-20,-40,60,20,-12,43,-3,-24,-23,14,19,13,-40,-15,27,-43,-13,63,9,-48,16,-26,8,-22,44,17,53,2,3,18,-49,-4,-26,106,-57,29,-7,-63,-69,-6,-98,-30,-6,17,-3,28,26,-20,-14,-127,52,-85,-3,15,-71,10,-26,-8,6,57,69,-66,-53,54,-47,89,17,-25,-34,-8,7,-61, 
  /* [9][0][][] */ -24,-45,-30,16,-6,37,-3,41,-33,-4,50,66,-33,42,19,-52,-9,18,-40,-33,6,41,-7,6,-8,27,-6,23,31,-13,20,-4,-26,-10,23,37,-25,-6,28,7,-12,-31,27,-12,-6,39,-6,48,-16,20,-5,43,127,11,-24,-10,8,-19,37,30,-30,14,63,9,14,11,77,-8,37,-2,-7,18,-5,-127,-34,-118,-21,-8,38,12,-28,17,-10,-38,38,7,-49,9,4,85,31,17,52,34,-12,18, 
  /* [10][0][][] */ 30,39,11,-13,-24,22,-49,-12,60,5,-41,25,22,7,-6,-45,-23,6,22,7,21,-21,2,-35,37,-11,-93,48,-18,54,-3,10,13,19,-17,2,11,-3,9,11,32,-15,48,-47,-19,-23,17,28,2,9,12,-31,-18,-5,-10,37,-8,-11,-9,10,-11,-35,-9,23,-3,-2,-81,-28,-57,-9,62,-12,-29,22,30,12,57,-17,-74,18,-19,35,-4,-3,4,21,-79,-127,-17,36,-1,9,43,-45,7,32, 
  /* [11][0][][] */ 42,-59,1,10,-51,45,16,17,79,-16,-32,-45,12,15,9,0,-13,54,-8,-62,7,19,12,-34,30,8,54,-5,39,-49,-25,16,7,111,-97,22,25,-3,59,21,-62,50,-41,7,-50,-16,-21,1,43,-17,-26,-17,-14,13,-75,82,-16,-7,-22,-49,15,6,-15,-73,-13,-51,-127,-108,1,-35,-84,26,54,12,-10,-22,35,59,-110,-34,-10,-6,-15,-6,-20,-26,49,89,11,-55,6,-8,-38,40,87,24, 
  /* [12][0][][] */ 13,29,-41,-38,29,-34,-12,40,52,-45,-2,-1,14,-20,-26,22,20,-53,-21,14,-8,55,-7,72,-11,-28,-127,-13,56,-27,27,2,-26,-92,75,-6,31,-15,-2,30,-16,-74,45,42,34,11,4,-6,-65,-15,-44,111,84,-34,20,-97,10,23,-42,-37,23,60,70,16,-14,-24,30,48,124,18,30,38,32,-34,-23,6,-29,-43,36,-66,15,-65,40,-41,-4,-14,-14,-105,0,30,-53,30,23,62,17,41, 
  /* [13][0][][] */ -18,20,-70,40,29,16,-29,6,29,60,-31,40,-47,-33,70,-61,12,41,27,17,-47,-37,2,1,80,37,-19,13,14,23,54,-22,-19,41,-11,47,12,-53,-53,-24,6,-15,30,15,28,51,-18,48,-29,39,9,12,-19,-36,42,37,16,-40,-10,17,26,10,0,2,17,81,127,37,14,-18,-20,-35,11,34,-84,49,33,-69,104,-13,-28,-41,8,9,13,55,-47,-29,6,-19,1,35,37,12,45,44, 
  /* [14][0][][] */ -10,69,8,35,-73,-46,37,31,-66,-18,69,14,-92,14,52,-19,-44,56,-70,21,-17,48,-101,0,-56,16,-53,-109,5,-2,37,102,-69,32,5,-17,-14,-66,5,-46,25,-34,44,-31,2,41,-64,27,14,-47,69,31,-28,16,-34,36,-74,47,19,30,29,74,-12,40,9,-42,12,-74,39,55,66,33,-60,43,10,18,26,3,41,9,-85,127,17,-127,89,2,-20,5,-124,-27,-34,10,-25,16,60,34, 
  /* [15][0][][] */ 51,-43,14,21,32,9,-12,-2,6,28,-54,1,53,67,-6,-24,-14,-6,-85,33,-10,-14,-1,23,47,-44,87,22,39,-39,-35,57,65,41,-15,-57,47,69,48,54,91,17,-14,19,-51,-100,30,-38,-36,-29,-18,8,11,-55,-35,37,-22,2,-8,27,-18,-38,-22,24,27,37,-57,42,8,-43,-17,0,4,-127,-54,-102,-15,22,-116,32,60,-34,30,28,-52,-21,1,-13,38,80,15,-84,-21,-33,35,-33, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0026639297138899565, 0.0030730972066521645, 0.0016409425297752023, 0.0030879571568220854, 0.0042760511860251427, 0.007218504324555397, 0.0020192258525639772, 0.0035873046144843102, 0.0046785231679677963, 0.0053764423355460167, 0.003470707917585969, 0.0037981066852807999, 0.0032794363796710968, 0.0060232034884393215, 0.0026660829316824675, 0.0032113187480717897, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 6776, -553, -2788, 5140, -2443, 1962, 1258, -2262, 5927, -4880, -830, -4948, 8412, -3570, -1307, -4702, -368, -1087, -8890, -1272, -2154, 1429, -4001, -483, 9, 6596, -11016, -4482, -1955, -2755, 3081, -620, 17799, 236, -1955, -1938, -1003, 7566, 8446, 7371, 1026, 3315, -2837, 2670, 350, -2127, 11764, 7040, -3838, -516, -3207, 1495, -526, -812, -3036, 1751, -3105, 2789, 1307, 3528, -811, -913, 4007, 7897, 15878, -642, 14025, 10210, -2505, 1257, 6726, -1234, -12, 267, -2846, -3496, 24190, 5444, 9482, 15689, 11235, -696, 13380, 12372, -408, -1542, 3867, -4781, 7155, -936, -5050, -2744, -1418, 1345, 26035, -2057, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001437652827007696, 0.00043004646431654692, 0.00027423672145232558, 0.00027724783285520971, 0.00018574188288766891, 0.00058659992646425962, 7.9562880273442715e-05, 0.0002233039413113147, 0.00031481185578741133, 0.00017829815624281764, 0.00034802622394636273, 0.0001844181097112596, 0.00010037045285571367, 9.6250252681784332e-05, 0.00029235772672109306, 0.00025537193869240582, 0.0002629755181260407, 0.00038822490023449063, 0.00016031254199333489, 0.00039771953015588224, 0.00020955067884642631, 0.00025140916113741696, 0.00016787757340352982, 0.00019318521663080901, 0.0034428436774760485, 0.00017903979460243136, 0.00027233790024183691, 0.00016773045354057103, 0.00040742431883700192, 0.00018641712085809559, 0.00014477736840490252, 0.00034724787110462785, 0.0001097890199162066, 0.00065273785730823874, 0.00014562500291503966, 0.0002266169321956113, 0.0003709656884893775, 0.00021481893782038242, 0.00011959081894019619, 0.00011433337931521237, 0.00053852243581786752, 0.00028092952561564744, 0.00026031420566141605, 0.00024892337387427688, 0.00021839470718987286, 0.00030083509045653045, 0.00013147464778739959, 0.00018863135483115911, 0.00013676285743713379, 0.00035248947096988559, 0.00027220224728807807, 0.00030145814525894821, 0.00014871513121761382, 0.00081928516738116741, 0.00022511721181217581, 0.00026248730137012899, 0.00014341463975142688, 0.00057571340585127473, 0.00045006390428170562, 0.00039702747017145157, 0.00032007123809307814, 0.00025521952193230391, 0.00018836431263480335, 9.3801252660341561e-05, 0.00020476141071412712, 0.00050250237109139562, 0.00010766250488813967, 0.0001860462361946702, 0.00034606189001351595, 0.00053092715097591281, 0.00014253557310439646, 0.00033318132045678794, 0.00043328999890945852, 0.00019147565762978047, 0.0001201244886033237, 0.00019141724624205381, 4.5424432755680755e-05, 0.00027862872229889035, 0.0001502740487921983, 0.00012292122119106352, 0.00014848417777102441, 0.00025591248413547873, 0.00012216343020554632, 0.00027588405646383762, 9.1589856310747564e-05, 0.00048539636190980673, 0.00022309207997750491, 0.00022034744324628264, 0.00013909894914831966, 0.00029546135920099914, 0.00018076501146424562, 0.00037139342748560011, 0.0003245561383664608, 0.00020951252372469753, 8.7892920419108123e-05, 0.00043100942275486887, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -10,-4,-27,13,116,-8,60,13,-20,10,-7,-11,-13,-13,-2,-9,-18,10,10,-5,3,19,31,27,-2,-18,-34,6,34,11,21,14,-66,2,13,-14,-5,-43,-51,-1,0,19,71,-9,-21,40,-76,-33,-24,30,-10,52,-51,-7,40,-17,30,-16,4,-21,-1,-9,-49,-11,-46,-31,-42,-45,-9,12,15,-14,19,-5,22,44,-1,14,127,-20,-77,14,-127,-13,-33,-15,14,15,-20,-24,2,-25,-2,18,-28,21, 12,15,94,-99,-38,-2,96,-63,-15,-9,-31,39,-69,16,-94,48,-13,100,83,-33,5,127,57,127,37,-4,61,54,127,35,127,-38,-127,-14,-105,-13,-5,-127,118,-68,-30,-111,-28,-34,46,-25,-61,-22,70,-5,17,117,-101,10,-78,-4,-50,-15,-5,19,-16,-127,-127,-47,-81,4,5,-90,1,10,-71,123,-127,1,16,-8,-111,-127,-10,-90,-127,-11,5,-77,94,83,-31,28,-127,-4,28,-20,7,127,-62,-73, -18,-22,-42,14,61,0,52,-18,-30,5,-1,15,-7,4,20,-65,-15,-8,-34,-18,3,-9,-21,48,-5,21,-2,-17,-6,7,-4,-11,5,-7,-25,69,-6,-7,-91,36,3,52,34,-11,-20,-18,-73,-40,-28,-6,-5,49,7,-23,-2,-31,93,-21,-12,-38,-22,-9,-52,10,-51,-26,121,-26,-3,14,58,20,14,9,1,23,-5,20,-27,-35,-74,-23,-108,-31,12,-63,29,2,-67,-22,-11,22,1,15,-64,7, 
  /* [0][1][][] */ -84,-1,26,-77,74,78,-10,-21,-13,-6,-22,1,-121,27,30,54,1,50,81,42,22,-22,106,-50,48,38,43,21,3,-4,-32,-14,-82,-17,69,-9,-12,-84,-112,-127,-19,18,120,-18,-46,127,-95,-103,23,82,10,-47,-111,46,95,-26,41,-25,23,-20,22,-18,43,-84,-51,10,-34,-79,-9,-7,-65,18,71,108,34,-75,-121,-11,-57,-44,-53,11,-47,-62,33,25,-127,39,-33,127,73,-44,127,-5,-95,7, 57,127,127,127,-127,-127,127,-67,127,127,-68,-49,-127,127,-41,64,127,-127,127,127,127,-92,127,-120,-127,-127,127,127,-105,127,-56,127,-95,127,127,-108,127,50,24,-68,127,-22,-127,-95,127,-22,127,121,127,-127,127,-127,92,127,-127,127,-113,127,-127,127,-97,106,88,-127,127,127,-12,127,-105,-127,-70,-127,-10,127,127,124,-24,-24,74,-127,39,127,70,127,127,78,-78,127,0,52,-37,-1,-70,-36,-127,-20, -127,-19,-15,-103,16,46,-71,6,-40,-23,0,127,-104,46,35,27,-36,46,82,7,18,-34,92,4,52,7,45,31,-22,-9,2,-6,-106,-43,85,127,9,-30,-127,-22,-35,-20,29,-23,-74,-59,-127,-127,43,72,-7,-35,127,13,118,-45,127,-34,38,-59,-5,-39,-105,-41,-86,4,-55,-65,7,-1,-127,10,16,-93,-2,127,-127,-38,-57,-14,-25,-27,-64,-95,8,30,-101,46,-41,-69,127,127,-39,-40,-102,-9, 
  /* [0][2][][] */ -34,-35,-18,26,48,-1,-18,33,-20,11,32,-12,94,22,-18,7,16,-16,-44,-20,-4,-10,-4,-29,-1,-20,19,6,7,-4,-38,10,3,0,34,-19,-3,-15,-43,17,-22,39,35,13,16,16,-72,-19,-100,-11,-7,-12,-32,-28,35,-7,33,-16,-4,-24,7,46,3,-18,-49,-27,127,-2,26,23,21,9,-10,2,0,-23,-35,27,-29,-39,-28,15,-89,-26,-5,0,75,-12,13,5,-33,0,-7,-7,-42,-7, -19,-58,-5,-112,-33,-9,50,127,-72,75,127,-21,-47,57,127,127,0,-32,72,-55,-6,-36,101,23,11,-21,47,-15,3,2,-111,-46,-69,-28,-98,3,-81,-45,73,-87,-33,-127,-54,127,32,-17,-44,-21,56,1,-11,-22,27,13,-49,-35,-46,-49,44,-70,127,52,76,-4,-111,-50,-20,-59,127,25,-85,16,33,-6,18,-20,-48,-44,-10,15,-107,-15,-91,-100,36,-127,38,-4,-7,-5,40,4,21,-115,-73,127, 18,23,-28,63,16,-12,-1,17,-33,-1,1,45,77,32,-39,-29,-4,5,-15,-24,-7,4,14,0,-6,-6,8,-11,-6,11,-47,8,8,3,5,-12,1,19,-71,78,-43,6,34,-3,3,1,-8,-5,-35,1,-15,-21,14,-27,28,-1,42,-9,-4,-33,-4,29,-37,-18,-12,-16,-10,21,30,-2,27,-10,-29,-49,-24,-11,10,26,76,-41,37,-4,-36,-5,1,26,85,-8,28,2,7,5,-4,-16,-44,-20, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0061100246384739876, 0.018276974558830261, 0.011655060574412346, 0.011783032678067684, 0.0078940298408269882, 0.024930495768785477, 0.0033814224880188704, 0.0094904173165559769, 0.013379503041505814, 0.0075776716694235802, 0.014791114255785942, 0.0078377695754170418, 0.0042657442390918732, 0.004090635571628809, 0.012425202876329422, 0.010853307321667671, 0.011176459491252899, 0.016499558463692665, 0.0068132830783724785, 0.01690308004617691, 0.0089059034362435341, 0.010684889741241932, 0.0071347965858876705, 0.0082103712484240532, 0.14632084965705872, 0.0076091908849775791, 0.01157436054199934, 0.0071285441517829895, 0.017315533012151718, 0.0079227276146411896, 0.0061530377715826035, 0.0147580336779356, 0.0046660332009196281, 0.027741359546780586, 0.0061890622600913048, 0.009631219319999218, 0.015766041353344917, 0.0091298045590519905, 0.0050826095975935459, 0.0048591685481369495, 0.022887201979756355, 0.011939504183828831, 0.011063353158533573, 0.010579243302345276, 0.0092817749828100204, 0.012785491533577442, 0.0055876723490655422, 0.008016832172870636, 0.005812421441078186, 0.014980802312493324, 0.01156859565526247, 0.012811970897018909, 0.0063203927129507065, 0.034819617867469788, 0.0095674814656376839, 0.011155709624290466, 0.006095122080296278, 0.024467818439006805, 0.01912771537899971, 0.016873667016625404, 0.013603027909994125, 0.010846829041838646, 0.0080054830759763718, 0.0039865532889962196, 0.0087023600935935974, 0.021356349810957909, 0.0045756562612950802, 0.0079069649800658226, 0.014707629568874836, 0.022564403712749481, 0.0060577616095542908, 0.014160205610096455, 0.018414825201034546, 0.0081377150490880013, 0.005105290561914444, 0.008135233074426651, 0.0019305383320897818, 0.011841719970107079, 0.0063866470009088516, 0.005224151536822319, 0.006310577504336834, 0.010876280255615711, 0.0051919459365308285, 0.01172507181763649, 0.0038925688713788986, 0.020629344508051872, 0.0094814132899045944, 0.0093647660687565804, 0.0059117050841450691, 0.012557107023894787, 0.0076825129799544811, 0.015784220770001411, 0.013793635182082653, 0.0089042820036411285, 0.003735448932275176, 0.018317900598049164, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 760, 3646, 417, 1451, 3143, 7693, 211, 1778, 9438, -950, 9517, 1259, 3928, 193, 1894, 54, 1666, 1956, -31, 5280, 436, 4041, -1032, 611, -6249, 1171, 1938, 889, 3882, 435, 2495, 2939, 1470, 10224, 1661, 3216, 1610, 1670, 2372, 1908, 6829, 1595, 2248, 288, 1325, 4468, 4195, 10955, 1264, -654, 915, 3431, 1675, -2073, 3845, -122, 1517, 8846, 904, 1544, 2019, 4245, 2492, -95, 10996, 9335, 1014, 1236, 6272, 3302, 1583, 470, -2278, 3096, 1933, 1956, 288, 7180, 2697, 7477, 2323, 245, 3291, 8011, -397, 8169, 2070, 761, -445, 1321, 517, 6898, 2179, 2394, 3270, 2161, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00039098772685974836, 0.00020502533880062401, 0.00029387386166490614, 0.000317678990541026, 0.00021065671171527356, 0.00012341699039097875, 0.00024797316291369498, 0.00019676997908391058, 9.8559008620213717e-05, 0.00018993012781720608, 8.8634151325095445e-05, 0.00033574461122043431, 0.00012547946244012564, 0.00066682352917268872, 0.00029062276007607579, 0.00026199055719189346, 0.0003603648510761559, 0.00030138780130073428, 0.00029040902154520154, 0.00016081145440693945, 0.00041841351776383817, 0.00019129324937239289, 0.00026108568999916315, 0.00029209099011495709, 0.00012044179311487824, 0.00020943091658409685, 0.00028612458845600486, 0.00037693450576625764, 0.00021071768424008042, 0.00041303073521703482, 0.00023467955179512501, 0.000191245082532987, 0.00032149531762115657, 8.2237798778805882e-05, 0.00025685003492981195, 0.00020469250739552081, 0.00034771327045746148, 0.0002839680528268218, 0.00022234252537600696, 0.00024699771893210709, 0.00013244259753264487, 0.00024012479116208851, 0.0002273262944072485, 0.00031053705606609583, 0.00021561389439739287, 0.0001918269699672237, 0.00016697366663720459, 7.5108662713319063e-05, 0.0002626818313729018, 0.00040818643174134195, 0.00049375236267223954, 0.00020329517428763211, 0.0002473538916092366, 0.00023496482754126191, 0.00019017599697690457, 0.00039427125011570752, 0.00018187478417530656, 9.2634654720313847e-05, 0.00020423834212124348, 0.00018003815785050392, 0.00019061309285461903, 0.00019256529049016535, 0.00026383492513559759, 0.00031228881562128663, 8.8829059677664191e-05, 9.3706665211357176e-05, 0.00041678480920381844, 0.00045371931628324091, 0.00011883068509632722, 0.00015630103007424623, 0.00030539830913767219, 0.00034828626667149365, 0.0002532842627260834, 0.00020815161406062543, 0.00020949076861143112, 0.0003161237109452486, 0.00024794883211143315, 0.00011852339230244979, 0.0002124393213307485, 0.00011978265683865175, 0.00017974323418457061, 0.00029309207457117736, 0.00015313291805796325, 0.0001173755808849819, 0.0001731422235025093, 9.7468306194059551e-05, 0.00032880631624720991, 0.00040433989488519728, 0.00031298835529014468, 0.00040083166095428169, 0.00034379059798084199, 0.00011607731721596792, 0.00022823121980763972, 0.00015744907432235777, 0.0001684663729975, 0.00026507826987653971, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 40,1,16,63,-127,-21,65,66,57,75,-39,8,6,-16,51,59, 
  /* [1][0][][] */ -32,11,-69,14,127,95,2,4,13,22,-57,49,-29,112,-33,-46, 
  /* [2][0][][] */ -54,81,88,5,76,91,20,53,26,-15,38,-10,78,-127,-19,29, 
  /* [3][0][][] */ 127,-27,17,4,24,28,-7,4,39,29,-62,-7,-31,72,-46,75, 
  /* [4][0][][] */ -23,-40,0,34,-127,19,-75,-29,3,1,10,-31,1,49,-43,102, 
  /* [5][0][][] */ -79,9,22,15,127,16,14,-4,-37,18,-17,8,-36,47,-63,-15, 
  /* [6][0][][] */ -127,21,-33,23,-10,-59,55,15,7,-34,-48,40,11,8,-39,15, 
  /* [7][0][][] */ -6,104,40,-60,51,27,127,21,36,-22,-15,53,96,33,-20,21, 
  /* [8][0][][] */ -46,-19,-65,63,-77,63,-67,-74,40,-29,91,33,93,51,-127,-23, 
  /* [9][0][][] */ -16,-127,-38,85,-46,-42,-18,62,37,33,20,69,-71,8,5,-22, 
  /* [10][0][][] */ 5,-32,-106,20,-127,111,52,-76,9,-85,63,-32,42,90,-89,91, 
  /* [11][0][][] */ -25,-79,-16,1,19,125,11,-25,0,36,28,-60,8,73,-92,127, 
  /* [12][0][][] */ -17,-119,-127,123,-99,-102,51,86,74,62,-39,94,5,-94,-57,-23, 
  /* [13][0][][] */ -61,-19,-41,-1,-17,-2,31,14,-31,127,-2,-18,47,38,18,-6, 
  /* [14][0][][] */ -117,-5,-55,-58,-28,69,-3,-119,127,-71,62,-18,92,-49,-82,-79, 
  /* [15][0][][] */ -6,-127,94,-46,-35,-45,10,59,10,-53,-81,-20,99,-25,-26,-31, 
  /* [16][0][][] */ 2,-43,-3,-25,31,29,-37,-21,52,-127,55,-7,-9,-6,-63,-76, 
  /* [17][0][][] */ -59,21,22,-67,31,-10,-39,-10,89,-58,33,86,127,-76,-29,-117, 
  /* [18][0][][] */ 50,10,-19,-124,7,-21,127,-39,15,58,-14,53,-14,65,-15,-101, 
  /* [19][0][][] */ -68,-39,-27,-88,-87,62,6,-20,34,-36,12,-127,-17,-17,-54,12, 
  /* [20][0][][] */ 6,63,73,-75,78,1,-30,78,-77,-111,17,-87,-15,127,-20,1, 
  /* [21][0][][] */ 20,-102,-127,-19,92,39,83,89,-81,-93,-44,27,116,-122,4,6, 
  /* [22][0][][] */ 55,-22,94,-11,14,2,84,51,8,127,49,49,-7,15,126,10, 
  /* [23][0][][] */ -127,-70,-3,69,58,33,23,-9,-25,40,11,-76,11,96,87,103, 
  /* [24][0][][] */ -9,-20,68,47,20,-127,22,-63,23,122,-125,81,-18,-68,102,-70, 
  /* [25][0][][] */ 119,-57,86,127,8,-11,-11,58,-119,57,59,-88,-33,14,84,-16, 
  /* [26][0][][] */ -25,20,11,42,-56,108,-14,44,-61,-41,-82,32,6,24,44,-127, 
  /* [27][0][][] */ 40,-4,-5,-62,-41,13,-71,-2,-89,-23,-80,-47,-83,40,-26,127, 
  /* [28][0][][] */ -83,10,31,9,32,-9,-127,13,4,-37,-3,-26,28,-60,-87,-47, 
  /* [29][0][][] */ -20,-109,-23,80,-39,9,127,3,82,59,-112,64,25,-31,-49,59, 
  /* [30][0][][] */ 48,-71,-84,11,-127,37,67,-44,11,1,-2,-32,-16,55,-3,79, 
  /* [31][0][][] */ -127,-17,13,104,-36,2,-52,-5,-26,-53,3,-32,-9,-57,-17,104, 
  /* [32][0][][] */ -119,-104,-78,-6,-95,-63,-6,-24,127,74,-65,-69,26,36,45,-32, 
  /* [33][0][][] */ -20,-4,-96,41,-127,-107,40,14,-115,17,-44,-65,-40,109,57,74, 
  /* [34][0][][] */ 25,48,14,25,-72,-33,40,9,42,-127,-22,35,-22,-7,42,79, 
  /* [35][0][][] */ 61,11,-76,-31,-127,19,104,-62,62,77,-16,12,12,95,44,94, 
  /* [36][0][][] */ -13,9,-41,56,127,-11,42,70,-69,21,-82,-91,25,-24,11,12, 
  /* [37][0][][] */ -127,64,-3,-76,82,-106,-44,-26,-11,8,-18,62,54,-80,24,-120, 
  /* [38][0][][] */ 66,53,26,-61,-106,-71,-127,-38,-59,-67,55,61,-56,-93,89,0, 
  /* [39][0][][] */ 4,-17,-26,65,7,65,90,-63,-44,57,30,-33,-30,99,60,127, 
  /* [40][0][][] */ 69,45,65,83,-50,-45,5,19,-65,71,8,-17,-56,-22,127,-13, 
  /* [41][0][][] */ -28,-19,8,68,-120,118,-3,69,-66,21,-115,19,30,45,58,-127, 
  /* [42][0][][] */ 10,-95,19,-41,112,62,72,10,-23,-127,-80,-29,4,26,-4,62, 
  /* [43][0][][] */ -34,-77,14,23,127,-5,-6,111,-4,-62,-115,-70,94,-11,-37,26, 
  /* [44][0][][] */ -43,-42,-70,-113,58,127,57,-45,-33,-116,-113,69,-68,42,22,91, 
  /* [45][0][][] */ 25,-64,-63,-13,-127,60,-25,-56,97,-54,28,-77,-15,2,-40,21, 
  /* [46][0][][] */ 3,-67,-7,32,91,-78,-24,91,-21,-21,47,72,-70,-46,47,-127, 
  /* [47][0][][] */ -97,-59,-29,122,-42,7,32,13,-23,127,125,98,-30,92,2,103, 
  /* [48][0][][] */ 35,3,-85,-94,29,-89,22,76,39,-88,3,38,-55,35,-68,-127, 
  /* [49][0][][] */ 61,64,15,21,-11,-24,38,48,-31,127,-30,39,-40,-26,59,69, 
  /* [50][0][][] */ 1,-5,11,1,-127,-14,-11,-47,48,23,16,50,-19,-57,16,-1, 
  /* [51][0][][] */ 19,28,-9,-127,-37,89,29,-41,23,6,9,-51,38,66,-27,17, 
  /* [52][0][][] */ 17,-4,18,-127,98,-110,-4,-57,44,-1,126,-57,57,7,-48,127, 
  /* [53][0][][] */ -45,-67,37,-33,-27,-127,21,-86,-6,84,-94,79,-41,-16,50,-68, 
  /* [54][0][][] */ 82,79,55,-14,-112,-67,-97,-127,14,10,67,79,-55,-40,72,7, 
  /* [55][0][][] */ 33,7,-35,73,-40,15,26,-24,5,127,31,51,-1,-9,5,52, 
  /* [56][0][][] */ -10,-127,-79,78,-54,13,5,84,114,6,49,32,-29,-15,32,122, 
  /* [57][0][][] */ 21,72,105,-98,110,-1,23,5,112,-88,-1,127,51,-74,95,-57, 
  /* [58][0][][] */ 69,-78,36,-55,32,-3,-10,122,34,127,-26,30,72,5,107,-5, 
  /* [59][0][][] */ -44,66,69,-68,-12,-79,20,-5,34,-8,-127,-79,-85,-55,85,-10, 
  /* [60][0][][] */ 76,-41,34,27,38,-29,62,-95,41,127,-50,88,3,-31,-46,-29, 
  /* [61][0][][] */ 76,53,30,-11,-73,-127,-14,-55,-36,-16,-33,12,-64,-32,70,72, 
  /* [62][0][][] */ -24,85,-43,47,-73,127,-45,38,-68,1,-36,31,-27,29,72,-98, 
  /* [63][0][][] */ 31,-14,-80,-127,-16,-28,89,-19,-18,-97,-8,45,-21,81,34,-21, 
  /* [64][0][][] */ -54,23,1,-26,45,-48,38,63,-127,-23,-55,-23,-29,89,42,66, 
  /* [65][0][][] */ -68,-14,-71,-20,69,34,-46,-65,-100,-63,42,-41,-127,94,-76,36, 
  /* [66][0][][] */ -22,69,-17,26,-54,127,-11,6,-89,18,-9,40,-24,53,46,-60, 
  /* [67][0][][] */ 11,2,-36,-24,11,-78,71,-84,2,24,2,103,-55,-28,-6,-127, 
  /* [68][0][][] */ -2,-127,-36,99,-12,-16,30,127,82,41,69,0,-102,9,-24,4, 
  /* [69][0][][] */ 22,42,76,-97,36,6,-45,85,6,99,46,72,84,-112,55,-127, 
  /* [70][0][][] */ 47,38,56,-41,101,16,-115,-65,-127,-92,-19,37,-44,56,-106,-15, 
  /* [71][0][][] */ -46,-55,41,-25,48,-24,39,28,-76,54,-127,-58,3,87,-15,62, 
  /* [72][0][][] */ 30,7,45,20,-43,-15,-102,-80,-1,89,-25,85,52,127,-124,-14, 
  /* [73][0][][] */ -32,-40,-16,-21,23,-83,27,-31,50,56,98,6,35,13,-48,127, 
  /* [74][0][][] */ 6,3,-32,72,-80,-7,94,29,79,66,22,127,122,38,-52,10, 
  /* [75][0][][] */ -50,32,-24,49,-25,127,-25,45,-41,58,-33,57,-28,54,42,-75, 
  /* [76][0][][] */ -62,67,-71,60,-127,-15,-7,21,50,28,-30,-36,75,-31,-102,58, 
  /* [77][0][][] */ 127,113,-119,107,111,86,42,5,50,55,92,-2,89,17,87,27, 
  /* [78][0][][] */ 17,-47,14,-61,84,-120,40,-54,86,52,127,-18,8,-8,-37,127, 
  /* [79][0][][] */ -45,49,-4,26,9,-39,-30,-7,-127,-6,65,15,109,46,-80,-37, 
  /* [80][0][][] */ -83,40,57,-1,41,29,-3,-127,-84,45,-68,-59,-27,-94,25,60, 
  /* [81][0][][] */ 76,86,-42,-2,31,-38,90,127,-106,119,-54,-46,-50,38,99,126, 
  /* [82][0][][] */ 44,127,-45,-68,15,-45,100,-91,25,29,-55,61,107,-26,70,-39, 
  /* [83][0][][] */ -5,-20,36,16,4,17,-17,-104,73,-28,75,8,29,-52,-60,-127, 
  /* [84][0][][] */ -125,-79,-56,-30,-28,115,99,-10,83,78,127,110,65,85,-81,3, 
  /* [85][0][][] */ 103,-7,127,-78,66,5,-5,76,-10,111,-69,-6,-16,52,96,3, 
  /* [86][0][][] */ -68,72,-17,5,24,78,5,2,127,43,108,-38,-41,51,16,-48, 
  /* [87][0][][] */ 12,-66,23,-45,53,-127,25,-25,38,-9,66,-31,40,-39,-47,76, 
  /* [88][0][][] */ -100,70,30,-8,82,-33,23,26,-87,-74,116,-81,63,123,118,-127, 
  /* [89][0][][] */ -24,26,-19,21,-31,127,-15,38,-41,4,-38,15,2,45,22,-84, 
  /* [90][0][][] */ 50,-82,20,27,127,2,34,15,-11,-91,-92,-7,8,-6,-47,39, 
  /* [91][0][][] */ -33,109,-73,-53,-35,-66,-102,49,-82,9,-48,-127,-93,-56,17,56, 
  /* [92][0][][] */ 89,58,73,37,-126,-127,-10,6,-37,70,-31,-35,-51,-113,33,2, 
  /* [93][0][][] */ -19,-127,-116,39,-67,-70,3,81,63,52,12,64,-71,54,-10,-10, 
  /* [94][0][][] */ 127,34,83,-30,20,-36,-2,42,28,105,0,53,-5,-7,120,-11, 
  /* [95][0][][] */ -47,-53,-18,-29,127,-11,45,68,-42,0,-112,-62,11,-9,-55,5, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0050909006968140602, 0.0026695560663938522, 0.0038264184258878231, 0.0041363760828971863, 0.0027428800240159035, 0.0016069652047008276, 0.0032287631183862686, 0.0025620663072913885, 0.0012832989450544119, 0.0024730071891099215, 0.0011540711857378483, 0.0043716016225516796, 0.0016338197747245431, 0.0086824530735611916, 0.0037840872537344694, 0.0034112783614546061, 0.0046921721659600735, 0.0039242547936737537, 0.0037813042290508747, 0.0020938641391694546, 0.0054480014368891716, 0.0024907558690756559, 0.0033994961995631456, 0.0038032045122236013, 0.0015682262601330876, 0.0027269194833934307, 0.0037255182396620512, 0.0049079190939664841, 0.0027436739765107632, 0.0053779142908751965, 0.0030556721612811089, 0.0024901286233216524, 0.0041860667988657951, 0.0010707867331802845, 0.0033443456050008535, 0.0026652223896235228, 0.0045274407602846622, 0.0036974388640373945, 0.0028950364794582129, 0.00321606220677495, 0.0017244841437786818, 0.003126572584733367, 0.0029599282424896955, 0.0040433835238218307, 0.0028074255678802729, 0.002497705165296793, 0.0021740999072790146, 0.00097796099726110697, 0.0034202791284769773, 0.0053148386068642139, 0.0064289597794413567, 0.0026470283046364784, 0.0032206999603658915, 0.0030593867413699627, 0.0024762086104601622, 0.0051336544565856457, 0.0023681216407567263, 0.0012061601737514138, 0.0026593089569360018, 0.0023442076053470373, 0.0024818996898829937, 0.0025073185097426176, 0.0034352932125329971, 0.0040661925449967384, 0.0011566090397536755, 0.0012201184872537851, 0.0054267947562038898, 0.0059077045880258083, 0.0015472486848011613, 0.0020351356361061335, 0.0039764740504324436, 0.0045349015854299068, 0.0032979168463498354, 0.0027102620806545019, 0.0027276987675577402, 0.0041161254048347473, 0.0032284462358802557, 0.0015432474901899695, 0.0027660906780511141, 0.0015596438897773623, 0.002340367529541254, 0.0038162390701472759, 0.0019938847981393337, 0.0015283023240044713, 0.0022544183302670717, 0.0012690973235294223, 0.0042812605388462543, 0.00526475440710783, 0.0040753008797764778, 0.0052190748974680901, 0.0044763651676476002, 0.0015113981207832694, 0.0029717108700424433, 0.0020500838290899992, 0.0021935359109193087, 0.0034514821600168943, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4123, 10811, -19950, 2783, 13787, -14247, -40221, -9505, -3772, 11611, -14655, -13408, 6325, -13695, -2225, -4017, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00015072760288603604, 0.0001677592663327232, 0.00014251812535803765, 0.00012997680460102856, 0.00011149844794999808, 0.00016224902356043458, 0.00011009774607373402, 0.00017656845739111304, 9.6189141913782805e-05, 0.0001043208540068008, 0.00014655492850579321, 0.00010880249465117231, 0.00014177085540723056, 6.935469718882814e-05, 0.00014031620230525732, 0.00018589969840832055, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 30,32,27,-41,72,55,-31,63,-11,117,-2,48,-38,35,-2,52,36,77,39,-65,-77,78,-8,47,55,47,30,50,-49,-46,-13,88,-30,6,-73,51,50,-127,-37,10,18,-38,56,-3,-6,-58,-61,-15, 
  /* [1][0][][] */ -49,-7,-71,-46,12,93,-50,14,-7,-27,-44,30,55,-27,-19,-26,-31,-36,-13,18,-67,47,-110,-45,-52,-40,45,63,-28,-29,37,-50,13,-65,-36,53,18,-58,127,-40,-26,30,-51,-13,37,53,32,16, 
  /* [2][0][][] */ 9,-6,61,-35,-21,-77,33,36,109,78,-66,24,120,-50,127,83,-60,-23,-28,27,84,-86,-35,-103,3,-34,31,-80,30,51,-41,11,35,-30,64,33,-76,20,3,-33,31,31,73,-20,31,-83,93,-64, 
  /* [3][0][][] */ 45,10,-24,-32,32,109,14,-17,40,-55,21,-25,-67,15,11,42,-43,-67,51,-118,-19,0,-15,-13,-43,90,127,68,-9,-38,26,34,65,-25,99,35,-39,-53,-3,41,33,5,-18,-6,17,15,-11,-25, 
  /* [4][0][][] */ 105,-12,-6,-58,77,102,43,-7,64,-14,-110,31,50,-35,-4,-13,-98,-127,-23,-91,-17,37,-45,-40,-68,127,-91,115,-51,-53,30,81,49,-52,16,-15,-7,22,-16,42,-58,-19,-3,58,-58,107,-31,-43, 
  /* [5][0][][] */ 6,-3,-52,10,-15,51,11,-33,65,56,35,94,55,-25,34,-3,-43,127,-14,44,-1,1,-70,-20,43,1,-62,-31,-20,34,20,-27,-36,6,35,21,-37,6,-99,5,99,-19,24,42,-19,0,-49,37, 
  /* [6][0][][] */ 60,10,15,61,5,-31,92,-68,-2,68,120,94,49,36,-49,67,44,-47,-79,91,47,-52,-38,51,-73,84,77,-3,127,45,-32,7,90,-75,-122,-6,108,34,5,16,15,44,59,-12,54,121,36,9, 
  /* [7][0][][] */ -86,-1,-25,31,-61,-55,17,46,73,106,-53,-72,-95,12,-18,-16,-80,101,12,119,-48,45,25,48,-15,-92,-21,-83,34,37,-3,7,-8,15,21,-8,14,-51,127,3,6,47,25,-21,53,71,-37,4, 
  /* [8][0][][] */ -11,-96,39,-58,54,-48,73,-35,-34,-118,25,14,-33,0,25,35,10,8,-47,102,10,31,-18,23,64,-15,-62,-37,-127,-19,-47,-112,11,-56,1,79,-19,21,120,15,22,0,74,116,-23,-71,-42,75, 
  /* [9][0][][] */ 19,-35,10,-80,27,81,-56,49,4,-35,-36,-25,31,-65,98,-22,19,-126,47,55,-78,54,60,-54,-14,-85,-19,89,74,71,-51,-30,-59,37,-7,127,-18,-56,-58,-5,-42,-9,39,107,45,88,-72,29, 
  /* [10][0][][] */ -5,19,-26,-6,17,36,-59,-38,57,32,63,-12,-28,-7,46,-44,-47,127,-1,45,3,-9,19,18,-38,33,3,91,39,3,-30,-11,71,8,-9,26,-15,-46,-32,16,-69,-4,25,-9,8,44,32,29, 
  /* [11][0][][] */ -37,55,-20,43,36,55,3,9,6,19,-127,-74,70,23,-14,-54,8,30,-43,-51,-6,-21,110,9,40,11,-12,43,11,27,0,57,26,3,-51,-5,38,84,112,13,24,-29,67,-2,-55,-15,96,1, 
  /* [12][0][][] */ -52,-10,34,18,-64,-51,-1,3,-22,-27,-127,10,77,-99,14,37,50,85,81,-108,-33,43,-44,-84,3,-20,37,-40,19,19,-13,67,62,62,31,-19,-53,-30,19,4,-26,15,48,-2,26,-17,-32,-24, 
  /* [13][0][][] */ -52,-117,-41,-106,12,23,58,2,-120,20,127,-68,58,42,121,5,116,34,-1,-92,77,-66,117,4,-61,6,-18,13,-43,-98,-113,13,52,-28,-70,62,42,-55,84,-75,-4,60,72,45,49,-26,98,-62, 
  /* [14][0][][] */ 70,22,-54,0,-47,9,-91,-15,-25,60,55,42,-21,-66,16,-54,49,-120,23,14,81,-66,26,4,-21,126,-93,0,-50,-31,-95,-8,127,41,95,-34,-79,14,-32,58,-21,-48,105,-34,-47,-43,-58,45, 
  /* [15][0][][] */ -56,12,36,16,95,7,-1,36,28,75,-20,46,66,-15,-35,-6,11,43,3,-36,26,-21,-45,-68,71,-70,-39,67,-30,-1,11,12,-57,-3,127,7,-91,14,54,-13,-34,-21,18,5,-47,-33,-5,21, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0064059230498969555, 0.0071297683753073215, 0.0060570202767848969, 0.0055240141227841377, 0.0047386838123202324, 0.0068955831229686737, 0.0046791541390120983, 0.0075041591189801693, 0.0040880385786294937, 0.004433636087924242, 0.0062285843305289745, 0.0046241059899330139, 0.0060252612456679344, 0.0029475744813680649, 0.0059634381905198097, 0.0079007372260093689, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 10771, 340, 15186, 740, 16878, -2317, 31798, 718, 10990, 40936, 14410, 25162, -1914, 10709, 33418, 22356, 3083, 3082, 775, 57143, 2841, 15925, 5630, 16904, 11915, 26028, 6451, -1749, -2247, 21448, 17345, 255, 347, 573, 4329, 15870, 6547, 21885, 2790, 17215, 23820, -4353, 1003, 11044, 564, 7086, 36519, 20411, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.4344072092790157e-05, 0.00017865053087007254, 7.2818627813830972e-05, 0.00023585020971950144, 0.00015695870388299227, 0.00013851936091668904, 6.4646817918401212e-05, 0.00032419481431134045, 0.00012322375550866127, 4.3757965613622218e-05, 4.0007238567341119e-05, 7.5599171395879239e-05, 8.5375468188431114e-05, 0.00014502694830298424, 5.0464754167478532e-05, 0.00010457706230226904, 0.00013562015374191105, 5.3666921303374693e-05, 0.00018051388906314969, 3.3868007449200377e-05, 5.2693383622681722e-05, 6.16123725194484e-05, 7.0605950895696878e-05, 0.00015546509530395269, 6.5476786403451115e-05, 8.7142485426738858e-05, 4.5518590923165902e-05, 6.1050850490573794e-05, 0.00027197820600122213, 4.9770300392992795e-05, 0.00010700432903831825, 0.00038475560722872615, 0.00022692943457514048, 0.00017242085596080869, 6.5215172071475536e-05, 5.4038951930124313e-05, 7.4800766014959663e-05, 9.1861242253798991e-05, 0.00010208310413872823, 0.00011125838500447571, 7.111440208973363e-05, 0.00018048996571451426, 0.00044969527516514063, 8.4050574514549226e-05, 0.00018413426005281508, 5.1996041293023154e-05, 5.9475834859767929e-05, 5.9708592743845657e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -115,71,-127,94,-34,83,-56,127,-66,-49,65,-43,71,-95,-53,-30,95,100,71,-102,86,-31,72,-78,-78,-49,84,101,-102,-57,-70,96,73,-89,93,-119,-95,-93,86,20,-12,-59,83,-48,70,52,-50,-24, -98,40,-71,111,-88,116,-35,103,-117,-88,108,-67,110,-127,-64,-77,112,117,127,-127,89,-94,99,-117,-127,-70,78,127,26,-114,-99,127,119,-127,107,-111,-111,-127,127,-10,-85,127,103,-84,-39,106,-66,-41, -72,30,4,30,-54,40,-14,77,-54,-14,47,-39,95,-74,-34,-6,48,72,70,-33,27,-58,39,-30,-27,-25,17,25,97,-101,-50,87,29,-81,47,-20,-56,-11,43,-61,-127,-26,33,-11,-65,58,-41,13, 
  /* [0][1][][] */ -112,76,-85,63,-67,75,-103,106,-127,-86,68,-80,88,-104,-87,-90,82,103,-47,-83,98,-101,88,-76,-61,-70,102,92,-127,-90,-84,90,127,43,107,-127,-127,-103,92,-56,-65,-81,95,-74,127,91,-122,-64, -127,127,-77,127,-127,127,-127,72,-123,-127,127,-127,127,-86,-127,-127,127,127,-31,-111,127,-127,127,-127,-120,-127,127,92,12,-127,-127,-7,123,23,127,-123,-90,-93,109,-127,-105,123,127,-78,-42,127,-127,-94, -75,68,-62,38,-69,31,-49,-10,-47,-51,83,-65,111,-45,-65,-3,56,67,-37,-29,36,-73,35,-55,-108,-12,59,74,97,-104,-26,36,40,-16,64,-68,10,8,52,-60,-55,-64,7,-75,-78,90,-70,-73, 
  /* [0][2][][] */ -32,28,-24,59,-33,61,-73,69,-47,-40,27,-44,15,-56,-36,-67,55,66,-55,-22,24,-27,40,-23,-29,-5,54,30,-57,-82,-58,11,34,44,45,-89,-25,-49,29,-52,-76,-21,27,-53,83,61,-59,-55, -21,24,-83,38,-50,34,-83,-51,-83,-51,63,-60,84,-97,-54,-51,74,61,-65,-28,39,-43,40,-25,-50,-62,48,39,2,-84,-58,34,30,58,65,-97,-50,-40,18,-89,-56,65,23,-127,-24,33,-70,-127, 12,11,-70,-10,-48,15,-39,-26,-9,-24,45,-38,69,22,-29,1,34,-2,-60,4,18,-2,-2,2,-26,-25,30,15,66,-36,7,-30,-5,34,38,-37,9,3,25,-71,-11,-17,5,-59,-43,42,-19,-50, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035846231039613485, 0.0075926473364233971, 0.0030947916675359011, 0.010023633949458599, 0.0066707446239888668, 0.0058870729990303516, 0.0027474898379296064, 0.013778279535472393, 0.0052370093762874603, 0.0018597134621813893, 0.0017003075918182731, 0.0032129648607224226, 0.003628457197919488, 0.0061636450700461864, 0.0021447520703077316, 0.0044445251114666462, 0.005763856228441, 0.0022808441426604986, 0.0076718400232493877, 0.0014393902383744717, 0.0022394687402993441, 0.002618525642901659, 0.0030007530003786087, 0.0066072666086256504, 0.002782763447612524, 0.0037035555578768253, 0.0019345401087775826, 0.0025946609675884247, 0.011559073813259602, 0.0021152377594262362, 0.0045476839877665043, 0.016352113336324692, 0.0096445009112358093, 0.0073278862982988358, 0.0027716448530554771, 0.0022966554388403893, 0.0031790323555469513, 0.003904102835804224, 0.0043385317549109459, 0.0047284811735153198, 0.0030223620124161243, 0.0076708234846591949, 0.019112048670649529, 0.0035721492022275925, 0.0078257061541080475, 0.002209831727668643, 0.0025277228560298681, 0.0025376151315867901, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1397, -865, 292, -2467, 2599, -512, 3046, -3323, 1077, 317, 1351, 3568, 37, -363, 473, 4935, -2213, 2251, 3935, 749, -558, 2113, -807, 3330, 1721, 1404, 861, -691, 4525, -154, 1824, -1989, -1061, 3541, -1010, 1364, 1656, 1167, 176, 3522, 1411, 6801, -3361, 1376, 6941, -374, 1996, 1848, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0003116185253020376, 0.00041454119491390884, 0.00052119238534942269, 0.00022182171232998371, 0.00031009881058707833, 0.00030873322975821793, 0.00024663875228725374, 0.0001841279590735212, 0.00030007213354110718, 0.00040474892011843622, 0.00025372137315571308, 0.00020725281501654536, 0.00051727308891713619, 0.00038305186899378896, 0.00032832039869390428, 0.00017379852943122387, 0.00023480123491026461, 0.00032333534909412265, 0.00022301691933535039, 0.00037678249645978212, 0.00036094884853810072, 0.00026298145530745387, 0.00025550593272782862, 0.00025407926295883954, 0.0002561800938565284, 0.00029855660977773368, 0.00035796148586086929, 0.00043020676821470261, 0.00018790502508636564, 0.00035668120835907757, 0.00022006110521033406, 0.0002143283054465428, 0.00021783154807053506, 0.00020366813987493515, 0.00028768129413947463, 0.00035191248753108084, 0.0002886030706577003, 0.00024776245118118823, 0.00029730773530900478, 0.00024870899505913258, 0.00039251899579539895, 0.00013328199565876275, 0.00016554284957237542, 0.00028405815828591585, 0.00013113870227243751, 0.00031753917573951185, 0.00027739093638956547, 0.00030851343763060868, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 79,35,127,-35,65,104,-73,-57, 
  /* [1][0][][] */ 8,-81,-127,9,37,22,27,6, 
  /* [2][0][][] */ -127,-4,-42,-16,51,38,-64,-35, 
  /* [3][0][][] */ 44,74,127,-109,-24,-123,-4,-27, 
  /* [4][0][][] */ -127,19,-52,-16,58,8,-32,-70, 
  /* [5][0][][] */ -100,18,-59,-16,13,36,-83,-127, 
  /* [6][0][][] */ -40,-124,-127,40,98,16,16,60, 
  /* [7][0][][] */ -60,-127,-96,-69,-82,-70,38,85, 
  /* [8][0][][] */ 85,35,3,-3,88,-71,-127,10, 
  /* [9][0][][] */ -39,53,-48,75,-64,-40,127,-32, 
  /* [10][0][][] */ -12,127,37,72,118,-17,-10,60, 
  /* [11][0][][] */ -88,-29,-27,4,-76,113,127,-1, 
  /* [12][0][][] */ 63,27,-127,39,-11,-44,-62,-14, 
  /* [13][0][][] */ 58,-29,-67,12,16,-127,-24,-15, 
  /* [14][0][][] */ 10,-79,61,9,127,-103,-53,25, 
  /* [15][0][][] */ -33,-46,5,127,76,88,-84,46, 
  /* [16][0][][] */ 127,27,-40,20,81,-108,-125,-8, 
  /* [17][0][][] */ 63,127,50,66,45,57,29,-93, 
  /* [18][0][][] */ 23,-13,0,1,127,8,31,4, 
  /* [19][0][][] */ 16,127,29,8,-114,21,28,-32, 
  /* [20][0][][] */ -63,23,67,-127,20,35,-17,111, 
  /* [21][0][][] */ -33,74,55,-127,17,42,-20,111, 
  /* [22][0][][] */ -59,-56,-84,11,-121,127,105,-8, 
  /* [23][0][][] */ 84,43,-127,19,18,-43,-59,-31, 
  /* [24][0][][] */ -41,38,18,6,-11,73,-127,104, 
  /* [25][0][][] */ -104,-46,-127,4,-62,-68,69,108, 
  /* [26][0][][] */ 45,1,-32,-34,108,-16,127,-36, 
  /* [27][0][][] */ 127,-66,19,69,5,37,-25,80, 
  /* [28][0][][] */ 49,52,50,4,127,-40,39,-22, 
  /* [29][0][][] */ -17,-8,-34,-44,-79,24,127,-33, 
  /* [30][0][][] */ 44,-127,-54,-75,-117,-8,11,-57, 
  /* [31][0][][] */ 11,22,-14,-10,-127,7,-27,-6, 
  /* [32][0][][] */ 45,-61,-52,86,-7,-91,114,-127, 
  /* [33][0][][] */ 69,127,66,48,90,3,-40,-17, 
  /* [34][0][][] */ -118,-43,127,-7,-21,103,107,0, 
  /* [35][0][][] */ -34,81,127,-8,-61,-61,-24,33, 
  /* [36][0][][] */ -98,11,89,-16,-6,127,65,19, 
  /* [37][0][][] */ -16,-94,-19,-127,-50,-96,86,41, 
  /* [38][0][][] */ 39,-8,90,-68,49,63,-127,11, 
  /* [39][0][][] */ -23,77,-127,-26,-20,-3,0,70, 
  /* [40][0][][] */ 74,-62,13,32,14,-6,10,127, 
  /* [41][0][][] */ -55,92,127,-30,7,79,-67,30, 
  /* [42][0][][] */ 69,-103,-109,-17,-127,15,27,-100, 
  /* [43][0][][] */ -20,-103,50,-90,127,-65,66,59, 
  /* [44][0][][] */ 0,122,127,22,8,73,-77,0, 
  /* [45][0][][] */ -40,43,16,82,-100,57,-127,24, 
  /* [46][0][][] */ -42,-46,68,51,-121,-127,-33,-7, 
  /* [47][0][][] */ -22,59,50,-90,-127,42,-28,63, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0028596464544534683, 0.0038041423540562391, 0.004782854113727808, 0.0020356031600385904, 0.0028457003645598888, 0.0028331687208265066, 0.0022633429616689682, 0.0016896969173103571, 0.0027536880224943161, 0.0037142811343073845, 0.0023283385671675205, 0.0019019079627469182, 0.0047468873672187328, 0.0035151725169271231, 0.0030129153747111559, 0.0015949063235893846, 0.0021547130309045315, 0.0029671688098460436, 0.0020465713459998369, 0.0034576400648802519, 0.0033123386092483997, 0.0024133159313350916, 0.0023447149433195591, 0.0023316226433962584, 0.0023509014863520861, 0.0027397803496569395, 0.0032849244307726622, 0.003947901539504528, 0.0017243580659851432, 0.0032731755636632442, 0.0020194465760141611, 0.001966838026419282, 0.0019989863503724337, 0.0018690123688429594, 0.0026399802882224321, 0.0032294141128659248, 0.0026484392583370209, 0.0022736550308763981, 0.0027283197268843651, 0.002282341243699193, 0.0036020500119775534, 0.0012230960419401526, 0.0015191459096968174, 0.0026067316066473722, 0.0012034275569021702, 0.0029139786493033171, 0.0025455483701080084, 0.0028311517089605331, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1027, 2563, 21747, -5312, 6491, -14724, -680, -15610, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00012626466923393309, 9.1320594947319478e-05, 0.00011147328768856823, 9.6865165687631816e-05, 0.00016950759163592011, 0.00015318016812670976, 9.0480796643532813e-05, 8.1607453466858715e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -22,-53,-15,-65,2,-11,78,81,-98,-80,-28,-1,-58,1,-58,35,-91,12,20,127,59,-38,17,94,77,65,24,11,-100,-46,-79,-47,-66,117,53,-59,30,-31,97,11,25,18,0,-92,37,-25,-36,-79, 
  /* [1][0][][] */ -8,49,-20,-37,-77,70,-26,-39,-26,63,-20,13,53,46,-36,-7,-17,-115,84,-39,127,1,-69,28,47,-4,-73,65,35,-17,67,33,-24,-18,5,-9,0,108,-17,-34,52,36,-11,14,93,9,-28,64, 
  /* [2][0][][] */ -24,-35,104,4,77,-28,-11,31,-31,0,-15,41,12,-40,-30,-127,-49,-90,-22,18,-97,22,-38,-31,-50,19,4,-51,-30,9,-28,-5,-1,-6,17,-10,24,-29,-42,-1,26,-31,32,-42,-36,-47,-61,-41, 
  /* [3][0][][] */ 65,4,64,12,9,-35,21,75,-59,-30,44,-15,-68,49,-11,48,75,26,-25,46,-111,-73,127,-1,9,-5,-50,-29,-76,62,119,-57,12,-114,-2,23,-13,-88,-12,74,-82,-69,55,8,-103,-80,56,-4, 
  /* [4][0][][] */ 19,-18,70,-29,4,-11,-2,-2,-51,-8,-27,-1,46,-65,45,-99,41,42,-10,-29,11,33,7,7,-3,8,53,-5,26,17,-127,-22,-30,-24,3,21,47,-4,29,7,-44,-9,-68,23,-24,-96,4,18, 
  /* [5][0][][] */ 20,-47,55,28,30,19,23,3,-70,-9,-49,25,37,5,18,-43,84,75,-1,-27,82,-44,127,-76,-12,45,7,40,15,9,-31,-43,-11,-41,-35,7,37,28,68,-1,-75,21,34,29,53,-18,74,4, 
  /* [6][0][][] */ -52,51,-127,82,52,5,33,16,-19,-20,59,-75,-88,-10,-37,35,-113,31,-5,81,23,58,-78,-74,3,-6,22,72,-18,-37,-38,3,50,63,-47,-14,-12,-11,81,21,81,63,-112,-68,-46,114,-53,-23, 
  /* [7][0][][] */ 39,69,-72,29,24,74,121,84,37,73,-85,8,-40,-5,-72,-45,37,42,122,109,82,2,127,9,105,92,-55,80,-66,42,-1,-68,11,-54,-11,5,4,102,-65,87,-67,53,9,-78,84,-11,49,-42, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.005366248544305563, 0.0038811252452433109, 0.0047376146540045738, 0.0041167694143950939, 0.0072040725499391556, 0.0065101571381092072, 0.0038454337045550346, 0.0034683167468756437, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -20, 10127, -525, -300, 1297, -402, 4015, 82, -3443, 568, -7739, -53, 594, -228, -583, 3018, 6322, 4718, 812, -3015, -6942, -264, 12684, -6808, -3074, -1438, 6028, -7390, -51, 1037, -8790, 9258, 4825, 182, 1823, 279, -17, -188, 9373, 876, 5980, -1486, 3384, 6538, -1277, 6705, 1149, -3283, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028095152811147273, 0.00021847289463039488, 0.0011608664644882083, 0.00030230756965465844, 0.00026343221543356776, 0.00082641904009506106, 0.00021937042765785009, 0.00035584869328886271, 7.7061638876330107e-05, 0.00030815409263595939, 0.00021858495892956853, 0.0035606969613581896, 0.00064348010346293449, 0.0011577882105484605, 0.00076604774221777916, 0.00095282297115772963, 0.00018615409499034286, 5.1892140618292615e-05, 0.00027155506541021168, 0.00041491989395581186, 0.00030065319151617587, 0.00023069587768986821, 0.00012044137838529423, 0.00061228510458022356, 0.00024546746863052249, 0.00063088600290939212, 0.00051767536206170917, 0.00022982247173786163, 0.00033665847149677575, 0.00041570913163013756, 0.00014890763850416988, 9.3892253062222153e-05, 0.0001505302352597937, 0.00023059129307512194, 0.0002090972411679104, 0.00035600297269411385, 0.0051313946023583412, 0.00023250702361110598, 0.00016559913638047874, 0.0002228732337243855, 0.00017820697394199669, 0.00016782690363470465, 0.00026542876730673015, 0.00018113761325366795, 0.00039147122879512608, 0.00010480631317477673, 6.2946179241407663e-05, 0.00019879262254107744, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-47,9,15,-20,-78,-57,41,-26,-12,14,15,46,-7,-26,13,101,20,30,-2,5,-31,-55,14,-7,-14,-9,-29,-50,68,-3,-86,50,1,-16,-53,-12,-39,-3,-5,-27,31,12,-17,-10,64,127,-16, -127,-67,-23,127,-70,86,-106,127,36,15,24,0,51,17,-6,-37,-14,67,28,-11,-5,127,15,127,127,-27,-47,32,59,-120,-11,-85,76,-5,-26,-110,26,1,-56,-42,-127,-9,-82,-127,25,37,57,127, -7,10,10,5,-25,59,41,41,6,-41,11,1,-24,-10,-11,6,-48,48,-68,-46,-9,-43,127,22,-71,4,9,17,-4,29,5,12,5,-12,-35,58,7,-2,19,72,38,-29,21,-35,-9,25,-32,6, 
  /* [0][1][][] */ -15,-32,-30,-7,31,-80,127,-88,-2,7,54,38,127,23,-13,-33,-34,-22,16,46,75,-72,36,17,-47,127,-75,-1,127,-96,63,-127,-56,12,-50,5,12,-68,-40,2,117,127,16,-106,-60,-54,-1,84, 92,-127,127,-9,127,83,-81,-61,34,127,127,-127,-89,127,127,127,127,127,112,127,127,122,0,10,124,-95,-127,127,39,127,127,5,-127,127,127,127,-127,127,-127,-127,44,12,-127,-34,127,-127,-8,85, 26,22,-43,-14,-56,127,-127,109,85,-82,16,63,-39,2,6,-71,24,25,-127,12,17,-115,-52,3,76,-10,-21,109,-87,-41,44,-41,-10,19,79,-32,38,-10,-1,-78,116,25,23,38,-47,98,85,-64, 
  /* [0][2][][] */ -14,10,6,-28,5,-45,-26,-4,12,-1,-5,2,-18,-10,-14,4,-31,7,1,-34,14,-23,81,-4,-93,6,34,7,21,-8,0,18,-23,-20,-48,21,-1,-8,24,34,-33,-9,5,5,-16,25,-17,16, 45,-9,-35,-24,25,53,114,-120,127,-37,-23,7,-76,-23,-30,-65,-8,87,-8,25,13,36,-25,-28,-67,64,67,2,-79,6,-33,-42,-32,-7,-28,7,55,-19,-4,99,-117,-32,-19,52,35,49,12,-113, -8,17,3,-25,-19,2,-11,-59,-21,-36,-19,3,5,-18,-10,13,36,36,-39,-22,-6,-13,-41,-6,26,-21,22,-11,-24,1,-9,-12,33,-28,-22,-50,-8,2,34,-4,-14,-2,-3,13,-13,11,54,-34, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011940440163016319, 0.0092850979417562485, 0.04933682456612587, 0.012848071753978729, 0.01119586918503046, 0.035122808068990707, 0.0093232430517673492, 0.015123569406569004, 0.0032751194667071104, 0.013096548616886139, 0.009289860725402832, 0.15132962167263031, 0.027347903698682785, 0.049205996096134186, 0.032557029277086258, 0.040494974702596664, 0.00791154894977808, 0.0022054158616811037, 0.011541089974343777, 0.017634095624089241, 0.012777760624885559, 0.0098045747727155685, 0.0051187584176659584, 0.026022115722298622, 0.010432367213070393, 0.026812653988599777, 0.022001203149557114, 0.0097674550488591194, 0.01430798415094614, 0.017667638137936592, 0.0063285743817687035, 0.0039904206059873104, 0.0063975346274673939, 0.0098001295700669289, 0.0088866325095295906, 0.015130125917494297, 0.21808426082134247, 0.0098815485835075378, 0.0070379632525146008, 0.0094721121713519096, 0.0075737959705293179, 0.0071326433680951595, 0.011280721984803677, 0.0076983482576906681, 0.016637526452541351, 0.004454268142580986, 0.0026752124540507793, 0.0084486864507198334, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 1757, 4017, 12182, 1180, 1518, -2128, 4579, 9224, 3964, -471, 3062, -2140, 19069, -1544, 2420, 12154, -155, 2111, 100, 2584, 2091, 2978, 398, 28532, 5386, 3971, 12782, 963, 4420, 4749, 530, 878, 1011, 1200, -524, 120, -2777, -313, 2476, 1713, 3331, 1318, 3360, 4851, 4526, 2250, 1710, 4612, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00032447732519358397, 0.0002166399935958907, 7.907152030384168e-05, 0.00024467354523949325, 0.00028051459230482578, 0.0002556903928052634, 0.00017742588534019887, 0.00010398121958132833, 0.0001483648520661518, 0.00036403661943040788, 0.00027375537320040166, 0.00024398727691732347, 5.2386913012014702e-05, 0.00029335424187593162, 0.00022883323254063725, 8.140799036482349e-05, 0.00056189298629760742, 0.00023548126046080142, 0.00038656135438941419, 0.0002804180548992008, 0.00030726214754395187, 0.00023821335344109684, 0.00039819593075662851, 3.9712871512165293e-05, 0.00015805223665665835, 0.00015597768651787192, 8.1478101492393762e-05, 0.00036373635521158576, 0.00017139926785603166, 0.00015720781811978668, 0.00051643396727740765, 0.0004612866323441267, 0.00027867924654856324, 0.00031422471511177719, 0.00036373682087287307, 0.00037638959474861622, 0.00021293599274940789, 0.0004019446496386081, 0.00024564930936321616, 0.00032876271870918572, 0.00021313446632120758, 0.00031834348919801414, 0.00024464057059958577, 0.00018076914420817047, 0.0001681778667261824, 0.00030880887061357498, 0.00039992647361941636, 0.00017219380242750049, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 58,127,-63,-76,26,70,22,65, 
  /* [1][0][][] */ 49,-70,46,-127,-51,74,-72,-41, 
  /* [2][0][][] */ -22,127,113,27,101,2,32,11, 
  /* [3][0][][] */ 114,44,-78,78,6,-86,-127,-27, 
  /* [4][0][][] */ -37,22,15,-60,-24,121,127,44, 
  /* [5][0][][] */ 6,54,-127,-68,40,80,33,-41, 
  /* [6][0][][] */ -1,127,50,53,66,21,28,-86, 
  /* [7][0][][] */ 127,-1,-20,35,28,-10,84,22, 
  /* [8][0][][] */ 43,127,68,104,116,78,100,-81, 
  /* [9][0][][] */ 30,95,-127,-74,3,93,12,49, 
  /* [10][0][][] */ -54,-51,18,-49,-1,-37,-43,127, 
  /* [11][0][][] */ 26,-95,-127,-1,26,-18,38,-14, 
  /* [12][0][][] */ -32,-119,-116,-33,-127,28,-56,36, 
  /* [13][0][][] */ -19,8,-96,95,-127,-19,10,-24, 
  /* [14][0][][] */ -62,-43,-127,-10,31,-4,-10,-64, 
  /* [15][0][][] */ 24,-83,-127,30,-94,-14,-18,-25, 
  /* [16][0][][] */ 127,-63,-20,62,-74,20,29,97, 
  /* [17][0][][] */ -27,113,127,-18,-46,-13,-26,-12, 
  /* [18][0][][] */ 1,-127,39,60,-16,-75,33,-82, 
  /* [19][0][][] */ 127,-48,-60,36,-98,1,46,107, 
  /* [20][0][][] */ -35,-127,79,70,-11,-85,5,-74, 
  /* [21][0][][] */ -7,-73,-10,-43,127,-17,54,18, 
  /* [22][0][][] */ -127,41,-96,52,60,55,-118,-114, 
  /* [23][0][][] */ -85,-49,67,-9,-112,127,126,-37, 
  /* [24][0][][] */ -36,69,12,-11,-22,127,94,28, 
  /* [25][0][][] */ -40,-99,-127,-60,-49,-12,-35,-38, 
  /* [26][0][][] */ -21,49,-14,127,-83,44,-45,6, 
  /* [27][0][][] */ 16,-127,46,88,14,-72,4,-120, 
  /* [28][0][][] */ 2,127,61,47,80,-19,16,-40, 
  /* [29][0][][] */ 120,26,-19,4,73,-127,-95,60, 
  /* [30][0][][] */ 20,-13,22,-127,20,-24,16,-21, 
  /* [31][0][][] */ 41,-41,10,68,-13,29,25,127, 
  /* [32][0][][] */ -72,-68,15,-87,-54,127,78,96, 
  /* [33][0][][] */ -37,37,38,-41,31,127,-102,61, 
  /* [34][0][][] */ 50,127,-112,-49,40,50,-85,63, 
  /* [35][0][][] */ -1,-127,48,57,-34,-53,45,-92, 
  /* [36][0][][] */ -14,-34,-83,-13,-127,-53,-14,3, 
  /* [37][0][][] */ -67,-127,82,91,-43,-87,-10,-37, 
  /* [38][0][][] */ -67,13,60,-80,-127,-101,-71,85, 
  /* [39][0][][] */ 63,-127,93,69,0,-71,-21,-90, 
  /* [40][0][][] */ 10,63,25,38,-127,-20,-80,32, 
  /* [41][0][][] */ 96,127,-66,-105,63,28,6,14, 
  /* [42][0][][] */ -8,-21,-10,17,127,10,35,28, 
  /* [43][0][][] */ 127,35,95,18,-69,-30,59,103, 
  /* [44][0][][] */ 71,53,-25,0,84,-127,-125,-9, 
  /* [45][0][][] */ 40,12,21,15,65,-127,-10,-43, 
  /* [46][0][][] */ 49,-28,-3,127,29,45,15,74, 
  /* [47][0][][] */ -63,-74,37,63,-39,30,127,-64, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0038921108935028315, 0.0025986004620790482, 0.00094846426509320736, 0.0029348633252084255, 0.0033647771924734116, 0.0030670107807964087, 0.0021282264497131109, 0.0012472565285861492, 0.0017796389292925596, 0.0043666255660355091, 0.0032837004400789738, 0.002926631597802043, 0.00062838190933689475, 0.0035187893081456423, 0.0027448586188256741, 0.00097649020608514547, 0.0067399162799119949, 0.0028246017172932625, 0.0046368101611733437, 0.0033636193256825209, 0.0036856147926300764, 0.0028573733288794756, 0.0047763669863343239, 0.00047635656665079296, 0.0018958393484354019, 0.0018709549913182855, 0.00097733119037002325, 0.0043630236759781837, 0.0020559371914714575, 0.0018857104005292058, 0.0061946343630552292, 0.0055331410840153694, 0.0033427623566240072, 0.0037691309116780758, 0.0043630292639136314, 0.004514799453318119, 0.0025541707873344421, 0.0048213331028819084, 0.0029465677216649055, 0.0039435145445168018, 0.002556551480665803, 0.0038185357116162777, 0.0029344679787755013, 0.0021683289669454098, 0.0020172963850200176, 0.0037041676696389914, 0.004797124769538641, 0.0020654676482081413, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7278, 14324, -5750, 4927, -2285, 3596, -11990, -17766, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00027638315805234015, 0.00013812031829729676, 0.00015502814494539052, 0.00017175715765915811, 0.00020028601284138858, 0.00018017433467321098, 0.00027547526406124234, 0.00016521297220606357, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -49,-8,34,8,-35,-12,16,12,-41,-9,-64,-62,-26,-60,-14,-32,48,-43,40,42,-20,31,-39,9,4,-40,57,-17,1,-19,22,10,83,37,41,-127,22,0,-11,-40,4,-18,43,54,37,8,28,5, 
  /* [1][0][][] */ 0,38,69,-33,-5,41,-44,-31,-3,19,-9,-92,14,97,-14,53,-17,27,-14,-66,15,-75,-30,27,-75,-10,2,-112,-30,-2,36,-57,49,64,-40,4,127,-27,-1,48,-33,46,-81,-30,117,-16,-29,-17, 
  /* [2][0][][] */ -6,-17,-57,15,-6,50,33,11,-14,44,3,23,63,-89,14,-71,36,-82,33,27,-19,56,-8,23,-18,54,-32,-61,11,10,24,-68,-44,-89,35,-30,110,20,-18,-55,-1,28,82,29,127,19,17,26, 
  /* [3][0][][] */ -7,21,-70,46,18,-30,-61,-97,15,-24,-30,-2,7,32,33,75,-5,13,-36,24,1,-98,23,-52,-71,-8,127,-13,-50,1,-63,16,-5,-78,19,-4,-16,-32,-21,97,-42,-32,2,24,41,6,-34,47, 
  /* [4][0][][] */ -24,-43,-6,9,31,-28,-10,-3,26,-30,59,-78,8,32,7,8,-13,-22,18,-16,2,-47,7,-19,15,-12,42,48,33,29,-13,25,-9,-9,-2,-2,-65,84,34,-23,24,-20,-18,-21,-73,10,127,12, 
  /* [5][0][][] */ 32,-17,-1,16,28,-36,30,-127,22,-27,-12,115,-80,66,15,-59,-5,-86,15,3,-34,63,-32,-32,-59,77,-23,1,-13,54,-47,-31,24,54,35,-7,-35,-9,-42,-47,18,-34,-45,-9,-35,62,87,23, 
  /* [6][0][][] */ 50,-21,15,-6,-36,-13,-34,19,-32,9,-43,127,-40,-35,-8,57,8,46,24,32,39,-78,-18,25,20,40,-61,3,10,-39,11,32,8,19,-13,-1,16,2,-6,-4,-8,-17,42,59,0,-30,73,-10, 
  /* [7][0][][] */ -37,5,-8,56,29,29,4,35,25,5,75,-10,119,103,64,48,41,51,-15,5,17,-19,-88,-24,22,-12,-32,70,43,-25,-41,-17,34,17,44,-98,-81,35,42,52,-36,24,86,127,-66,-30,-117,55, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.011746283620595932, 0.0058701131492853165, 0.0065886960364878178, 0.0072996793314814568, 0.0085121551528573036, 0.0076574091799557209, 0.011707698926329613, 0.0070215514861047268, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 14307, 1924, 2159, -1139, 1856, 109, 403, 37667, 174, 27, 10065, 52611, 3433, 9440, -35, 12614, -2005, 13355, 777, 6074, 15513, 1416, 2298, -8681, 11201, 2125, 3456, 10378, -2007, -452, -9098, 8576, 2720, -228, -461, 6895, -7893, 21239, -2157, 17706, -44, 418, 6368, 3673, 2414, 192, 6144, -882, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.0060181567678228e-05, 9.0434950834605843e-05, 0.00018558086594566703, 0.0001539912773296237, 0.0008723909268155694, 0.00011996523971902207, 0.00015713705215603113, 8.5310319263953716e-05, 0.00014512680354528129, 9.0867724793497473e-05, 6.2123443058226258e-05, 6.5507643739692867e-05, 8.1263409811072052e-05, 6.1150945839472115e-05, 0.00019079388584941626, 0.00019646088185254484, 0.00013059114280622452, 0.00036941588041372597, 0.00016496131138410419, 0.0001327704667346552, 0.00014463772822637111, 0.00042477896204218268, 0.00016694983060006052, 0.00031539841438643634, 0.00010753398964880034, 7.3039213020820171e-05, 5.8966375945601612e-05, 9.4021976110525429e-05, 0.0001157434016931802, 0.00093230063794180751, 0.00026532862102612853, 6.4931395172607154e-05, 8.6917090811766684e-05, 0.00013114867033436894, 0.0002027275477303192, 5.8998124586651102e-05, 9.4305672973860055e-05, 3.191743599018082e-05, 0.0001626815355848521, 5.5041531595634297e-05, 0.00013722872245125473, 0.00012001421418972313, 7.0249458076432347e-05, 0.00010438561730552465, 6.1286031268537045e-05, 0.00052286149002611637, 5.5046672059688717e-05, 0.00021461285359691828, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -67,-74,16,-6,127,-50,88,-91,-81,-76,-21,-44,95,25,60,-127,57,-9,1,-38,-127,115,-24,2,1,37,46,-5,108,-76,22,-61,-109,-86,39,63,20,89,127,-57,-121,-18,26,73,61,-127,104,86, -60,-127,-80,74,-85,108,48,-79,-61,49,93,-112,127,76,116,-90,-82,-108,33,-56,-111,127,-71,126,-85,115,84,-92,106,-58,5,-127,-53,-72,74,119,112,95,112,-73,-127,-80,62,102,95,108,102,85, -28,-33,-42,127,-47,-38,47,-27,72,33,45,-87,25,43,-14,-13,-80,-26,26,-28,19,25,-48,2,-116,38,21,-79,33,54,91,-99,44,11,-1,51,70,43,38,26,-28,92,67,44,45,19,12,-123, 
  /* [0][1][][] */ -123,-76,-2,-87,-76,-78,78,-117,-127,-127,110,-83,68,29,-127,-74,127,-127,-61,-85,-127,103,-7,8,-8,74,95,-43,-93,-83,15,-28,-106,-127,-127,56,33,100,13,-102,45,-32,83,110,97,109,127,-127, -115,-93,-127,-115,-37,127,127,-127,69,78,127,-127,104,127,66,-102,47,-99,-127,-127,-103,83,-127,127,-127,127,127,-127,-127,127,-6,-119,-127,-97,47,127,127,127,-6,-127,93,-109,127,127,127,-14,96,125, -89,-31,-106,113,65,-58,31,-14,48,37,-2,-52,19,69,80,-74,-11,17,-7,-57,-90,-4,-87,-13,-98,56,17,-98,-40,33,127,-116,-56,9,63,67,86,88,-19,-21,32,127,75,5,66,-53,14,37, 
  /* [0][2][][] */ -127,-10,38,11,-45,-31,17,-70,30,-42,21,-59,-6,21,-52,-17,-93,-27,99,-57,6,5,-57,-31,8,41,70,4,40,57,3,31,-19,-94,-43,47,23,12,-73,-49,5,-17,25,48,31,65,26,-65, -98,-37,-18,-59,81,40,38,-62,80,17,-59,-69,-7,56,-110,-92,38,15,55,-77,-62,28,-29,35,-64,55,78,-28,45,10,-32,-40,-76,24,-65,60,36,17,-82,-69,19,-50,72,69,46,-112,39,13, -51,-16,-56,-32,-27,-14,3,-27,-47,20,-34,-24,-5,39,52,-45,38,52,-4,-48,-72,41,10,-28,-47,-5,11,-36,9,-54,45,-27,-84,20,34,47,7,-20,-24,-36,-10,73,22,21,38,-5,14,53, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025525577366352081, 0.0038434853777289391, 0.0078871864825487137, 0.0065446291118860245, 0.037076614797115326, 0.0050985226407647133, 0.0066783246584236622, 0.0036256886087357998, 0.0061678891070187092, 0.0038618783000856638, 0.0026402464136481285, 0.0027840747497975826, 0.0034536949824541807, 0.0025989152491092682, 0.0081087397411465645, 0.0083495872095227242, 0.0055501237511634827, 0.015700174495577812, 0.0070108557119965553, 0.0056427447125315666, 0.0061471033841371536, 0.018053105100989342, 0.0070953676477074623, 0.013404432684183121, 0.0045701945200562477, 0.0031041665934026241, 0.0025060710031539202, 0.003995934035629034, 0.0049190944992005825, 0.039622776210308075, 0.011276465840637684, 0.0027595842257142067, 0.0036939764395356178, 0.0055738184601068497, 0.0086159203201532364, 0.0025074202567338943, 0.004007990937680006, 0.0013564910041168332, 0.0069139651022851467, 0.002339265076443553, 0.0058322208933532238, 0.0051006041467189789, 0.0029856020119041204, 0.0044363886117935181, 0.0026046561542898417, 0.022221611812710762, 0.0023394834715873003, 0.0091210464015603065, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1050, -421, -307, 845, 12146, 1384, -291, 3132, 911, 945, 221, 2869, 887, 284, -678, 396, 2408, 10481, 2558, -686, 1114, -1392, -41, 2165, -288, -612, 1082, -71, 2868, 9858, 1405, -16, 350, -85, 2001, 95, 388, -173, 1002, 966, 1181, 1883, 269, -379, 519, 1592, 826, -129, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051879952661693096, 0.00042468661558814347, 0.0003499980375636369, 0.00041202554712072015, 8.3550476119853556e-05, 0.00041979155503213406, 0.00069369457196444273, 0.00027715202304534614, 0.00041454387246631086, 0.00065832352265715599, 0.00041983512346632779, 0.00031140935607254505, 0.00028120755450800061, 0.00046803048462606966, 0.00033563768374733627, 0.00036948331398889422, 0.00030561871244572103, 9.2888956714887172e-05, 0.00027141903410665691, 0.00040982291102409363, 0.00042381245293654501, 0.00021161288896109909, 0.00054109649499878287, 0.00037504758802242577, 0.00053942855447530746, 0.00088241155026480556, 0.00043894440750591457, 0.0012238979106768966, 0.00027531912201084197, 9.6813586424104869e-05, 0.00046850374201312661, 0.00080254295608028769, 0.00048270617844536901, 0.00052656064508482814, 0.00038071346352808177, 0.00040628953138366342, 0.00051227066433057189, 0.00072657858254387975, 0.0004457553441170603, 0.00058610615087673068, 0.00046285658027045429, 0.00036716382601298392, 0.00037667682045139372, 0.00048845773562788963, 0.00052105233771726489, 0.00029377336613833904, 0.00035120118991471827, 0.00036390911554917693, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -20,28,-4,-22,-61,-21,-127,24, 
  /* [1][0][][] */ 73,-72,-72,-48,127,-97,100,33, 
  /* [2][0][][] */ -101,114,-41,-127,55,-28,-23,40, 
  /* [3][0][][] */ 35,4,83,5,70,127,118,-6, 
  /* [4][0][][] */ -46,-127,57,23,-33,-94,20,-53, 
  /* [5][0][][] */ 127,-16,78,70,-64,-20,-8,-20, 
  /* [6][0][][] */ 21,30,127,-26,34,-34,-39,31, 
  /* [7][0][][] */ 18,8,-127,-45,-47,107,86,-70, 
  /* [8][0][][] */ -2,127,-31,5,77,84,23,39, 
  /* [9][0][][] */ -11,127,-59,74,20,-99,46,96, 
  /* [10][0][][] */ -10,-113,-3,-32,-72,-127,-66,-70, 
  /* [11][0][][] */ -127,-91,112,55,-11,-65,98,59, 
  /* [12][0][][] */ -35,48,-127,94,36,-69,-79,97, 
  /* [13][0][][] */ 91,-127,82,84,6,34,32,-51, 
  /* [14][0][][] */ -82,104,-72,-123,-60,-127,-11,-71, 
  /* [15][0][][] */ 43,111,38,-20,31,-65,99,-127, 
  /* [16][0][][] */ -127,-124,-58,106,-51,20,-11,75, 
  /* [17][0][][] */ -23,-111,-127,62,-65,63,-51,63, 
  /* [18][0][][] */ -112,-66,-45,91,-18,75,-20,127, 
  /* [19][0][][] */ 61,-127,97,-123,20,-69,14,-37, 
  /* [20][0][][] */ 3,83,41,11,46,127,73,-10, 
  /* [21][0][][] */ 28,110,44,-36,42,-58,97,-127, 
  /* [22][0][][] */ 30,13,110,1,-3,127,33,-35, 
  /* [23][0][][] */ -95,-60,34,-71,83,89,-49,-127, 
  /* [24][0][][] */ -100,-95,54,-80,102,109,-57,-127, 
  /* [25][0][][] */ 127,8,-62,-13,10,27,-67,-9, 
  /* [26][0][][] */ -127,-36,-123,-22,-60,-31,21,-5, 
  /* [27][0][][] */ 79,34,-2,-57,-127,-24,83,95, 
  /* [28][0][][] */ -127,-115,23,58,-78,-127,8,-7, 
  /* [29][0][][] */ 87,108,29,-127,35,12,-68,-86, 
  /* [30][0][][] */ -76,-72,23,-59,66,86,-51,-127, 
  /* [31][0][][] */ 51,42,-1,127,4,-83,10,17, 
  /* [32][0][][] */ -24,127,-9,41,25,73,-19,53, 
  /* [33][0][][] */ -36,127,-77,28,22,-24,-31,-6, 
  /* [34][0][][] */ -112,-127,-56,93,-7,14,29,74, 
  /* [35][0][][] */ -59,127,-38,-7,64,109,62,72, 
  /* [36][0][][] */ 60,19,1,-42,-127,-25,93,111, 
  /* [37][0][][] */ -68,101,18,22,-127,100,-19,-95, 
  /* [38][0][][] */ 38,27,19,23,120,69,127,56, 
  /* [39][0][][] */ -21,-75,36,-16,1,41,-97,127, 
  /* [40][0][][] */ -76,-36,-48,127,-31,7,1,54, 
  /* [41][0][][] */ 127,1,51,95,-57,-7,6,-25, 
  /* [42][0][][] */ -41,11,-74,-127,58,-120,3,74, 
  /* [43][0][][] */ 26,-2,97,1,37,127,98,8, 
  /* [44][0][][] */ -25,-25,-62,127,45,9,-38,-39, 
  /* [45][0][][] */ 73,118,104,-106,56,-64,-14,-127, 
  /* [46][0][][] */ -32,-127,-39,33,-18,41,-56,115, 
  /* [47][0][][] */ 50,29,127,9,82,124,119,-25, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044598761014640331, 0.0036508315242826939, 0.0030087688937783241, 0.0035419901832938194, 0.00071824423503130674, 0.0036087508779019117, 0.0059633664786815643, 0.0023825459647923708, 0.0035636390093713999, 0.0056592985056340694, 0.0036091255024075508, 0.0026770401746034622, 0.0024174093268811703, 0.0040234383195638657, 0.0028853197582066059, 0.0031762747094035149, 0.0026272607501596212, 0.00079852278577163815, 0.0023332620039582253, 0.0035230552311986685, 0.0036433166824281216, 0.0018191366689279675, 0.0046515525318682194, 0.0032241081353276968, 0.0046372143551707268, 0.0075856777839362621, 0.0037733991630375385, 0.010521275922656059, 0.0023667893838137388, 0.00083226099377498031, 0.0040275068022310734, 0.0068990853615105152, 0.0041495985351502895, 0.0045265946537256241, 0.0032728149089962244, 0.0034926803782582283, 0.0044037504121661186, 0.0062460550107061863, 0.0038319495506584644, 0.0050384793430566788, 0.0039789606817066669, 0.0031563350930809975, 0.0032381138298660517, 0.004199041984975338, 0.0044792424887418747, 0.002525431802496314, 0.0030191116966307163, 0.003128355834633112, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7662, -2444, 11521, -9116, 21146, 7263, -7783, 11341, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017968479369301349, 0.00022585333499591798, 0.00019465696823317558, 0.00025041779736056924, 0.00016150467854458839, 0.00017221218149643391, 0.00014697022561449558, 0.00031818728893995285, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -16,-13,-19,-65,-30,-34,25,-20,37,8,-30,-10,111,127,-14,-107, 
  /* [1][0][][] */ 127,-60,-41,16,-51,71,-68,-45,-47,84,-35,-52,-10,1,-58,-13, 
  /* [2][0][][] */ -42,-91,43,34,47,-57,-74,-25,33,-90,28,-127,46,-22,-72,19, 
  /* [3][0][][] */ 34,12,9,10,-5,63,-52,-22,127,40,9,23,10,-13,6,20, 
  /* [4][0][][] */ -94,-43,-29,-127,-9,39,62,-121,36,-19,-57,-38,-115,32,-45,-17, 
  /* [5][0][][] */ 94,63,71,-19,51,-55,-127,-126,-19,-73,73,46,-58,52,64,-43, 
  /* [6][0][][] */ 101,45,-123,-88,33,-80,-3,-94,-42,18,-127,100,96,-99,8,68, 
  /* [7][0][][] */ -127,-3,92,-29,-57,3,-7,-52,-45,59,80,-27,59,-26,31,27, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0076366034336388111, 0.009598766453564167, 0.008272920735180378, 0.010642756707966328, 0.0068639484234154224, 0.0073190177790820599, 0.0062462347559630871, 0.013522959314286709, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 19769, -620, -51, 2041, -1007, -51, 11522, 1229, 685, 257, -1625, 2394, -3926, -1163, -319, -364, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00011414802429499105, 0.00037737537059001625, 0.00016188429435715079, 0.00016937660984694958, 0.0013795179547742009, 0.0010818867012858391, 0.00015793708735145628, 0.00089149933774024248, 0.0002465664001647383, 0.0012553258566185832, 0.00021753826877102256, 0.00022664878633804619, 0.00013009576650802046, 0.00022323659504763782, 0.00025272124912589788, 0.0015230417484417558, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-3,8,5,-19,12,12,16,0,-12,-4,-13,-1,-5,-3,-4, 7,-4,-3,7,14,-1,15,-25,-8,8,-7,80,-3,22,-1,-1, 8,-4,-7,6,4,-13,0,11,-2,2,-6,-6,-7,-5,-3,0, 
  /* [0][1][][] */ 15,-12,3,10,127,-23,-127,-21,127,127,-3,-7,107,-20,0,-24, -127,127,127,4,-87,-90,-23,-101,12,-106,127,127,127,127,127,127, 22,2,-1,4,-9,127,-9,-10,-5,-13,-11,-6,5,-3,1,-12, 
  /* [0][2][][] */ 3,-3,-4,-15,-18,16,52,7,-6,-8,2,0,-6,4,-8,-16, 26,-6,-10,-127,6,-15,-20,127,-5,1,0,-20,-4,-53,-9,-42, 5,0,-3,-2,2,-4,-12,-2,-1,2,-2,5,7,-3,-1,-16, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0048512909561395645, 0.016038453206419945, 0.006880082655698061, 0.0071985055692493916, 0.058629512786865234, 0.045980185270309448, 0.0067123263143002987, 0.037888720631599426, 0.010479072108864784, 0.053351346403360367, 0.0092453761026263237, 0.0096325734630227089, 0.0055290698073804379, 0.0094875553622841835, 0.010740652680397034, 0.064729273319244385, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -413, 219, 524, -330, 35720, 44714, 4736, 8011, 3212, 8978, 527, -269, 3898, 3720, 96, 23577, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00026097314548678696, 0.0017965621082112193, 0.00040039565647020936, 0.00021162895427551121, 4.1741921450011432e-05, 3.4840577427530661e-05, 0.00017022083920892328, 3.4347416658420116e-05, 0.00027178580057807267, 4.2935578676406294e-05, 0.00066117785172536969, 0.0013528248528018594, 0.00048159781727008522, 2.2267548047238961e-05, 0.0012670224532485008, 5.451532342704013e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -81, -105, -28, 
  /* [0][1][][] */ 68, -34, 18, 
  /* [0][2][][] */ 34, 127, 21, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 122, 127, 59, 
  /* [3][1][][] */ 4, -20, -13, 
  /* [3][2][][] */ -99, -125, -42, 
  /* [4][0][][] */ 15, -54, 15, 
  /* [4][1][][] */ 13, -127, 18, 
  /* [4][2][][] */ -1, -88, 9, 
  /* [5][0][][] */ -66, 24, -5, 
  /* [5][1][][] */ -127, 25, -5, 
  /* [5][2][][] */ -87, 14, -11, 
  /* [6][0][][] */ -18, 78, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -38, -53, -90, 
  /* [7][0][][] */ 26, 20, -21, 
  /* [7][1][][] */ 127, 80, 0, 
  /* [7][2][][] */ 36, 13, -11, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -25, 46, -7, 
  /* [9][1][][] */ -17, 127, -10, 
  /* [9][2][][] */ -3, 97, -8, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 71, 14, -24, 
  /* [13][1][][] */ 127, 97, -13, 
  /* [13][2][][] */ 87, 111, 43, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -74, -21, 20, 
  /* [15][1][][] */ -121, -127, 16, 
  /* [15][2][][] */ -24, -71, 1, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.080046124756336212, 0.55104458332061768, 0.12281003594398499, 0.064911194145679474, 0.01280315313488245, 0.010686361230909824, 0.052210427820682526, 0.010535098612308502, 0.083362601697444916, 0.013169273734092712, 0.20279760658740997, 0.41494074463844299, 0.14771650731563568, 0.0068299402482807636, 0.38862329721450806, 0.016721032559871674, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11632599681615829, } };
const TfArray<1, int> quant46_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.083367951214313507, } };
const TfArray<1, int> quant50_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.080671198666095734, } };
const TfArray<1, int> quant53_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.1089709997177124, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.076801285147666931, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.082085028290748596, } };
const TfArray<1, int> quant61_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.094383224844932556, } };
const TfArray<1, int> quant62_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.080828875303268433, } };
const TfArray<1, int> quant65_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.11996197700500488, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.073077276349067688, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant69_scale = { 1, { 0.34558719396591187, } };
const TfArray<1, int> quant69_zero = { 1, { 36 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 345600, (TfLiteIntArray*)&tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 221808, (TfLiteIntArray*)&tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 100800, (TfLiteIntArray*)&tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16208, (TfLiteIntArray*)&tensor_dimension69, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
